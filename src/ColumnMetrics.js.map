{"version":3,"file":"ColumnMetrics.js","sourceRoot":"","sources":["ColumnMetrics.ts"],"names":[],"mappings":"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","sourcesContent":["export { sameColumn } from './ColumnComparer';\nimport { getSize, isFrozen } from './ColumnUtils';\nimport getScrollbarSize from './getScrollbarSize';\nimport { isColumnsImmutable } from './common/utils';\nimport { Column, CalculatedColumn, ColumnList, ColumnMetrics } from './common/types';\n\ntype Metrics = Pick<ColumnMetrics, 'totalWidth' | 'minColumnWidth'> & {\n  columns: ColumnList;\n};\n\nfunction cloneColumns(columns: ColumnList): Column[] {\n  if (Array.isArray(columns)) {\n    return columns.map(c => ({ ...c }));\n  }\n  return cloneColumns(columns.toArray());\n}\n\nfunction setColumnWidths(columns: Column[], totalWidth: number): void {\n  for (const column of columns) {\n    if (typeof column.width === 'string' && /^\\d+%$/.test(column.width)) {\n      column.width = Math.floor(totalWidth * column.width / 100);\n    }\n  }\n}\n\nfunction setDefferedColumnWidths(columns: Column[], unallocatedWidth: number, minColumnWidth: number): void {\n  const defferedColumns = columns.filter(c => !c.width);\n  const columnWidth = Math.floor(unallocatedWidth / defferedColumns.length);\n\n  for (const column of columns) {\n    if (column.width) continue;\n\n    if (unallocatedWidth <= 0) {\n      column.width = minColumnWidth;\n    }\n\n    column.width = columnWidth < minColumnWidth ? minColumnWidth : columnWidth;\n  }\n}\n\nfunction setColumnOffsets(columns: Column[]): void {\n  let left = 0;\n  for (const column of columns as CalculatedColumn[]) {\n    column.left = left;\n    left += column.width;\n  }\n}\n\nconst getTotalColumnWidth = (columns: Column[]): number => columns.reduce((acc, c) => acc + (c.width || 0), 0);\n\nexport function recalculate(metrics: Metrics): ColumnMetrics {\n  // clone columns so we can safely edit them:\n  const columns = cloneColumns(metrics.columns);\n  // compute width for columns which specify width\n  setColumnWidths(columns, metrics.totalWidth);\n\n  const width = getTotalColumnWidth(columns);\n  const unallocatedWidth = metrics.totalWidth - width - getScrollbarSize();\n\n  // compute width for columns which doesn't specify width\n  setDefferedColumnWidths(columns, unallocatedWidth, metrics.minColumnWidth);\n\n  // compute left offset\n  setColumnOffsets(columns);\n\n  const frozenColumns = columns.filter(c => isFrozen(c));\n  const nonFrozenColumns = columns.filter(c => !isFrozen(c));\n  const calculatedColumns = frozenColumns.concat(nonFrozenColumns) as CalculatedColumn[];\n  calculatedColumns.forEach((c, i) => c.idx = i);\n  return {\n    width,\n    columns: calculatedColumns,\n    totalWidth: metrics.totalWidth,\n    totalColumnWidth: getTotalColumnWidth(columns),\n    minColumnWidth: metrics.minColumnWidth\n  };\n}\n\n/**\n * Update column metrics calculation by resizing a column.\n */\nexport function resizeColumn(metrics: ColumnMetrics, index: number, width: number): ColumnMetrics {\n  const updatedColumn = { ...metrics.columns[index] };\n  updatedColumn.width = Math.max(width, metrics.minColumnWidth);\n  const updatedMetrics = { ...metrics };\n  updatedMetrics.columns = [...metrics.columns];\n  updatedMetrics.columns.splice(index, 1, updatedColumn);\n\n  return recalculate(updatedMetrics);\n}\n\ntype ColumnComparer = (colA: Column, colB: Column) => boolean;\n\nfunction compareEachColumn(prevColumns: ColumnList, nextColumns: ColumnList, isSameColumn: ColumnComparer): boolean {\n  if (getSize(prevColumns) !== getSize(nextColumns)) return false;\n\n  const keys = new Set<string>();\n  const prevColumnsMap = new Map<string, Column>();\n  const nextColumnsMap = new Map<string, Column>();\n\n  for (const column of prevColumns) {\n    keys.add(column.key);\n    prevColumnsMap.set(column.key, column);\n  }\n\n  for (const column of nextColumns) {\n    keys.add(column.key);\n    nextColumnsMap.set(column.key, column);\n  }\n\n  if (keys.size > prevColumnsMap.size) return false;\n\n  for (const key of keys) {\n    if (!prevColumnsMap.has(key) || !nextColumnsMap.has(key)) return false;\n    const prevColumn = prevColumnsMap.get(key)!;\n    const nextColumn = nextColumnsMap.get(key)!;\n    if (!isSameColumn(prevColumn, nextColumn)) return false;\n  }\n\n  return true;\n}\n\nexport function sameColumns(prevColumns: ColumnList, nextColumns: ColumnList, isSameColumn: ColumnComparer): boolean {\n  if (isColumnsImmutable(prevColumns) && isColumnsImmutable(nextColumns)) {\n    return prevColumns === nextColumns;\n  }\n\n  return compareEachColumn(prevColumns, nextColumns, isSameColumn);\n}\n"]}