{"version":3,"file":"Canvas.js","sourceRoot":"","sources":["Canvas.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { isElement } from 'react-is';\n\nimport Row from './Row';\nimport RowsContainer, { RowsContainerProps } from './RowsContainer';\nimport RowGroup from './RowGroup';\nimport { InteractionMasks, EventBus } from './masks';\nimport { isRowSelected } from './RowUtils';\nimport { getColumnScrollPosition } from './utils/canvasUtils';\nimport { EventTypes, CellNavigationMode } from './common/enums';\nimport { CalculatedColumn, RowData, Position, RowGetter, CellMetaData, ScrollPosition, SubRowDetails, RowRenderer, InteractionMasksMetaData, RowRendererProps, RowSelection } from './common/types';\n\nexport interface Props {\n  rowRenderer?: React.ReactElement | React.ComponentType;\n  rowHeight: number;\n  height: number;\n  width?: number;\n  totalWidth?: number | string;\n  style?: string;\n  className?: string;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  rowVisibleStartIdx: number;\n  rowVisibleEndIdx: number;\n  colVisibleStartIdx: number;\n  colVisibleEndIdx: number;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  rowsCount: number;\n  rowGetter: RowGetter;\n  columns: CalculatedColumn[];\n  cellMetaData: CellMetaData;\n  selectedRows?: RowData[];\n  rowKey: string;\n  scrollToRowIndex?: number;\n  contextMenu?: React.ReactElement;\n  rowSelection?: RowSelection;\n  rowGroupRenderer?: React.ComponentType;\n  isScrolling: boolean;\n  length?: number;\n  enableCellSelect: boolean;\n  enableCellAutoFocus: boolean;\n  cellNavigationMode: CellNavigationMode;\n  eventBus: EventBus;\n  editorPortalTarget: Element;\n  RowsContainer: React.ComponentType<RowsContainerProps>;\n  lastFrozenColumnIndex?: number;\n  totalColumnWidth: number;\n  interactionMasksMetaData: InteractionMasksMetaData;\n  onScroll(position: ScrollPosition): void;\n  getSubRowDetails?(rowIdx: RowData): SubRowDetails;\n}\n\ntype RendererProps = Pick<Props, 'rowVisibleStartIdx' | 'rowVisibleEndIdx' | 'columns' | 'cellMetaData' | 'colVisibleStartIdx' | 'colVisibleEndIdx' | 'colOverscanEndIdx' | 'colOverscanStartIdx' | 'lastFrozenColumnIndex' | 'isScrolling'> & {\n  ref(row: (RowRenderer & React.Component<RowRendererProps>) | null): void;\n  key: number;\n  idx: number;\n  row: RowData;\n  subRowDetails?: SubRowDetails;\n  height: number;\n  isSelected: boolean;\n  scrollLeft: number;\n};\n\nexport default class Canvas extends React.PureComponent<Props> {\n  static displayName = 'Canvas';\n\n  static defaultProps = {\n    RowsContainer\n  };\n\n  private readonly canvas = React.createRef<HTMLDivElement>();\n  private readonly interactionMasks = React.createRef<InteractionMasks>();\n  private readonly rows = new Map<number, RowRenderer & React.Component<RowRendererProps>>();\n  private unsubscribeScrollToColumn?(): void;\n  private _scroll = { scrollTop: 0, scrollLeft: 0 };\n\n  componentDidMount() {\n    this.unsubscribeScrollToColumn = this.props.eventBus.subscribe(EventTypes.SCROLL_TO_COLUMN, this.scrollToColumn);\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeScrollToColumn!();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { scrollToRowIndex } = this.props;\n    if (scrollToRowIndex && prevProps.scrollToRowIndex !== scrollToRowIndex) {\n      this.scrollToRow(scrollToRowIndex);\n    }\n  }\n\n  handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n    const { scrollLeft, scrollTop } = e.currentTarget;\n    this._scroll = { scrollTop, scrollLeft };\n    if (this.props.onScroll) {\n      this.props.onScroll(this._scroll);\n    }\n  };\n\n  onHitBottomCanvas = () => {\n    const { current } = this.canvas;\n    if (current) {\n      current.scrollTop += this.props.rowHeight + this.getClientScrollTopOffset(current);\n    }\n  };\n\n  onHitTopCanvas = () => {\n    const { current } = this.canvas;\n    if (current) {\n      current.scrollTop -= this.props.rowHeight - this.getClientScrollTopOffset(current);\n    }\n  };\n\n  handleHitColummBoundary = ({ idx }: Position) => {\n    this.scrollToColumn(idx);\n  };\n\n  scrollToRow(scrollToRowIndex: number) {\n    const { current } = this.canvas;\n    if (!current) return;\n    const { rowHeight, rowsCount, height } = this.props;\n    current.scrollTop = Math.min(\n      scrollToRowIndex * rowHeight,\n      rowsCount * rowHeight - height\n    );\n  }\n\n  scrollToColumn(idx: number) {\n    const { current } = this.canvas;\n    if (!current) return;\n\n    const { scrollLeft, clientWidth } = current;\n    const newScrollLeft = getColumnScrollPosition(this.props.columns, idx, scrollLeft, clientWidth);\n    if (newScrollLeft !== 0) {\n      current.scrollLeft = scrollLeft + newScrollLeft;\n    }\n  }\n\n  getRows(rowOverscanStartIdx: number, rowOverscanEndIdx: number) {\n    const rows = [];\n    let i = rowOverscanStartIdx;\n    while (i < rowOverscanEndIdx) {\n      const row = this.props.rowGetter(i);\n      let subRowDetails: SubRowDetails | undefined;\n      if (this.props.getSubRowDetails) {\n        subRowDetails = this.props.getSubRowDetails(row);\n      }\n      rows.push({ row, subRowDetails });\n      i++;\n    }\n    return rows;\n  }\n\n  getScroll() {\n    const { scrollTop, scrollLeft } = this.canvas.current!;\n    return { scrollTop, scrollLeft };\n  }\n\n  getClientScrollTopOffset(node: HTMLDivElement) {\n    const { rowHeight } = this.props;\n    const scrollVariation = node.scrollTop % rowHeight;\n    return scrollVariation > 0 ? rowHeight - scrollVariation : 0;\n  }\n\n  isRowSelected(idx: number, row: RowData) {\n    // Use selectedRows if set\n    if (this.props.selectedRows) {\n      const selectedRow = this.props.selectedRows.find(r => {\n        const rowKeyValue = typeof row.get === 'function' ? row.get(this.props.rowKey) : row[this.props.rowKey];\n        return r[this.props.rowKey] === rowKeyValue;\n      });\n      return !!(selectedRow && selectedRow.isSelected);\n    }\n\n    // Else use new rowSelection props\n    if (this.props.rowSelection) {\n      const { keys, indexes, isSelectedKey } = this.props.rowSelection as { [key: string]: any };\n      return isRowSelected(keys as { rowKey?: string; values?: string[] } | null, indexes as number[] | null, isSelectedKey as string | null, row, idx);\n    }\n\n    return false;\n  }\n\n  setScrollLeft(scrollLeft: number) {\n    const { current } = this.interactionMasks;\n    if (current) {\n      current.setScrollLeft(scrollLeft);\n    }\n\n    this.rows.forEach((r, idx) => {\n      const row = this.getRowByRef(idx);\n      if (row && row.setScrollLeft) {\n        row.setScrollLeft(scrollLeft);\n      }\n    });\n  }\n\n  getRowByRef = (i: number) => {\n    // check if wrapped with React DND drop target\n    if (!this.rows.has(i)) return;\n\n    const row = this.rows.get(i)!;\n    const wrappedRow = row.getDecoratedComponentInstance ? row.getDecoratedComponentInstance(i) : null;\n    return wrappedRow ? wrappedRow.row : row;\n  };\n\n  getRowTop = (rowIdx: number) => {\n    const row = this.getRowByRef(rowIdx);\n    if (row && row.getRowTop) {\n      return row.getRowTop();\n    }\n    return this.props.rowHeight * rowIdx;\n  };\n\n  getRowHeight = (rowIdx: number) => {\n    const row = this.getRowByRef(rowIdx);\n    if (row && row.getRowHeight) {\n      return row.getRowHeight();\n    }\n    return this.props.rowHeight;\n  };\n\n  getRowColumns = (rowIdx: number) => {\n    const row = this.getRowByRef(rowIdx);\n    return row && row.props ? row.props.columns : this.props.columns;\n  };\n\n  renderCustomRowRenderer(props: RendererProps) {\n    const { ref, ...otherProps } = props;\n    const CustomRowRenderer = this.props.rowRenderer!;\n    const customRowRendererProps = { ...otherProps, renderBaseRow: (p: RowRendererProps) => <Row ref={ref} {...p} /> };\n\n    if (isElement(CustomRowRenderer)) {\n      if (CustomRowRenderer.type === Row) {\n        // In the case where Row is specified as the custom render, ensure the correct ref is passed\n        return <Row {...props} />;\n      }\n      return React.cloneElement(CustomRowRenderer, customRowRendererProps);\n    }\n\n    return <CustomRowRenderer {...customRowRendererProps} />;\n  }\n\n  renderGroupRow(props: RendererProps) {\n    const { ref, ...rowGroupProps } = props;\n    return (\n      <RowGroup\n        {...rowGroupProps}\n        {...props.row.__metaData!}\n        name={props.row.name as string}\n        eventBus={this.props.eventBus}\n        renderer={this.props.rowGroupRenderer}\n        renderBaseRow={(p: RowRendererProps) => <Row ref={ref} {...p} />}\n      />\n    );\n  }\n\n  renderRow(props: RendererProps) {\n    const { row } = props;\n\n    if (row.__metaData && row.__metaData.getRowRenderer) {\n      return row.__metaData.getRowRenderer(this.props, props.idx);\n    }\n    if (row.__metaData && row.__metaData.isGroup) {\n      return this.renderGroupRow(props);\n    }\n\n    if (this.props.rowRenderer) {\n      return this.renderCustomRowRenderer(props);\n    }\n\n    return <Row {...props} />;\n  }\n\n  renderPlaceholder(key: string, height: number) {\n    // just renders empty cells\n    // if we wanted to show gridlines, we'd need classes and position as with renderScrollingPlaceholder\n    return (\n      <div key={key} style={{ height }}>\n        {this.props.columns.map(column => <div style={{ width: column.width }} key={column.key} />)}\n      </div>\n    );\n  }\n\n  render() {\n    const { rowOverscanStartIdx, rowOverscanEndIdx, cellMetaData, columns, colOverscanStartIdx, colOverscanEndIdx, colVisibleStartIdx, colVisibleEndIdx, lastFrozenColumnIndex, rowHeight, rowsCount, totalColumnWidth, totalWidth, height, rowGetter, RowsContainer, contextMenu } = this.props;\n\n    const rows = this.getRows(rowOverscanStartIdx, rowOverscanEndIdx)\n      .map(({ row, subRowDetails }, idx) => {\n        const rowIdx = rowOverscanStartIdx + idx;\n        return row && this.renderRow({\n          key: rowIdx,\n          ref: (row: (RowRenderer & React.Component<RowRendererProps>) | null) => {\n            if (row) {\n              this.rows.set(rowIdx, row);\n            } else {\n              this.rows.delete(rowIdx);\n            }\n          },\n          idx: rowIdx,\n          rowVisibleStartIdx: this.props.rowVisibleStartIdx,\n          rowVisibleEndIdx: this.props.rowVisibleEndIdx,\n          row,\n          height: rowHeight,\n          columns,\n          isSelected: this.isRowSelected(rowIdx, row),\n          cellMetaData,\n          subRowDetails,\n          colVisibleStartIdx,\n          colVisibleEndIdx,\n          colOverscanStartIdx,\n          colOverscanEndIdx,\n          lastFrozenColumnIndex,\n          isScrolling: this.props.isScrolling,\n          scrollLeft: this._scroll.scrollLeft\n        });\n      });\n\n    if (rowOverscanStartIdx > 0) {\n      rows.unshift(this.renderPlaceholder('top', rowOverscanStartIdx * rowHeight));\n    }\n\n    if (rowsCount - rowOverscanEndIdx > 0) {\n      rows.push(this.renderPlaceholder('bottom', (rowsCount - rowOverscanEndIdx) * rowHeight));\n    }\n\n    return (\n      <div\n        className=\"react-grid-Canvas\"\n        style={{ width: totalWidth, height }}\n        ref={this.canvas}\n        onScroll={this.handleScroll}\n      >\n        <InteractionMasks\n          ref={this.interactionMasks}\n          rowGetter={rowGetter}\n          rowsCount={rowsCount}\n          rowHeight={rowHeight}\n          columns={columns}\n          rowVisibleStartIdx={this.props.rowVisibleStartIdx}\n          rowVisibleEndIdx={this.props.rowVisibleEndIdx}\n          colVisibleStartIdx={colVisibleStartIdx}\n          colVisibleEndIdx={colVisibleEndIdx}\n          enableCellSelect={this.props.enableCellSelect}\n          enableCellAutoFocus={this.props.enableCellAutoFocus}\n          cellNavigationMode={this.props.cellNavigationMode}\n          eventBus={this.props.eventBus}\n          contextMenu={this.props.contextMenu}\n          onHitBottomBoundary={this.onHitBottomCanvas}\n          onHitTopBoundary={this.onHitTopCanvas}\n          onHitLeftBoundary={this.handleHitColummBoundary}\n          onHitRightBoundary={this.handleHitColummBoundary}\n          scrollLeft={this._scroll.scrollLeft}\n          scrollTop={this._scroll.scrollTop}\n          getRowHeight={this.getRowHeight}\n          getRowTop={this.getRowTop}\n          getRowColumns={this.getRowColumns}\n          editorPortalTarget={this.props.editorPortalTarget}\n          {...this.props.interactionMasksMetaData}\n        />\n        <RowsContainer id={contextMenu ? contextMenu.props.id : 'rowsContainer'}>\n          <div style={{ width: totalColumnWidth }}>{rows}</div>\n        </RowsContainer>\n      </div>\n    );\n  }\n}\n"]}