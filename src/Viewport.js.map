{"version":3,"file":"Viewport.js","sourceRoot":"","sources":["Viewport.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport Canvas from './Canvas';\nimport { RowsContainerProps } from './RowsContainer';\nimport {\n  getGridState,\n  getColOverscanEndIdx,\n  getVisibleBoundaries,\n  getScrollDirection,\n  getRowOverscanStartIdx,\n  getRowOverscanEndIdx,\n  getColOverscanStartIdx,\n  getNonFrozenVisibleColStartIdx,\n  getNonFrozenRenderedColumnCount,\n  findLastFrozenColumnIndex\n} from './utils/viewportUtils';\nimport EventBus from './masks/EventBus';\nimport { ColumnMetrics, CellMetaData, RowGetter, RowData, SubRowDetails, InteractionMasksMetaData, RowSelection } from './common/types';\nimport { SCROLL_DIRECTION, CellNavigationMode } from './common/enums';\n\ninterface ScrollParams {\n  height: number;\n  scrollTop: number;\n  scrollLeft: number;\n  rowsCount: number;\n  rowHeight: number;\n}\n\nexport interface ScrollState {\n  height: number;\n  scrollTop: number;\n  scrollLeft: number;\n  rowVisibleStartIdx: number;\n  rowVisibleEndIdx: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  colVisibleStartIdx: number;\n  colVisibleEndIdx: number;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  scrollDirection: SCROLL_DIRECTION;\n  lastFrozenColumnIndex: number;\n  isScrolling: boolean;\n}\n\nexport interface ViewportProps {\n  rowOffsetHeight: number;\n  totalWidth: number | string;\n  columnMetrics: ColumnMetrics;\n  rowGetter: RowGetter;\n  selectedRows?: RowData[];\n  rowSelection?: RowSelection;\n  rowRenderer?: React.ReactElement | React.ComponentType;\n  rowsCount: number;\n  rowHeight: number;\n  onScroll(scrollState: ScrollState): void;\n  minHeight: number;\n  cellMetaData: CellMetaData;\n  rowKey: string;\n  scrollToRowIndex?: number;\n  contextMenu?: React.ReactElement;\n  getSubRowDetails?(): SubRowDetails;\n  rowGroupRenderer?: React.ComponentType;\n  enableCellSelect: boolean;\n  enableCellAutoFocus: boolean;\n  cellNavigationMode: CellNavigationMode;\n  eventBus: EventBus;\n  RowsContainer?: React.ComponentType<RowsContainerProps>;\n  editorPortalTarget: Element;\n  interactionMasksMetaData: InteractionMasksMetaData;\n}\n\ninterface State {\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  rowVisibleStartIdx: number;\n  rowVisibleEndIdx: number;\n  height: number;\n  scrollTop: number;\n  scrollLeft: number;\n  colVisibleStartIdx: number;\n  colVisibleEndIdx: number;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  isScrolling: boolean;\n  lastFrozenColumnIndex: number;\n}\n\nexport default class Viewport extends React.Component<ViewportProps, State> {\n  static displayName = 'Viewport';\n\n  readonly state: Readonly<State> = getGridState(this.props);\n  private readonly canvas = React.createRef<Canvas>();\n  private readonly viewport = React.createRef<HTMLDivElement>();\n  private resetScrollStateTimeoutId: number | null = null;\n\n  onScroll = ({ scrollTop, scrollLeft }: { scrollTop: number; scrollLeft: number }) => {\n    const { rowHeight, rowsCount, onScroll } = this.props;\n    const nextScrollState = this.updateScroll({\n      scrollTop,\n      scrollLeft,\n      height: this.state.height,\n      rowHeight,\n      rowsCount\n    });\n\n    onScroll(nextScrollState);\n  };\n\n  getScroll() {\n    return this.canvas.current!.getScroll();\n  }\n\n  setScrollLeft(scrollLeft: number) {\n    this.canvas.current!.setScrollLeft(scrollLeft);\n  }\n\n  getDOMNodeOffsetWidth() {\n    return this.viewport.current ? this.viewport.current.offsetWidth : 0;\n  }\n\n  clearScrollTimer() {\n    if (this.resetScrollStateTimeoutId !== null) {\n      window.clearTimeout(this.resetScrollStateTimeoutId);\n    }\n  }\n\n  getNextScrollState({ scrollTop, scrollLeft, height, rowHeight, rowsCount }: ScrollParams): ScrollState {\n    const isScrolling = true;\n    const { columns } = this.props.columnMetrics;\n    const scrollDirection = getScrollDirection(this.state, scrollTop, scrollLeft);\n    const { rowVisibleStartIdx, rowVisibleEndIdx } = getVisibleBoundaries(height, rowHeight, scrollTop, rowsCount);\n    const rowOverscanStartIdx = getRowOverscanStartIdx(scrollDirection, rowVisibleStartIdx);\n    const rowOverscanEndIdx = getRowOverscanEndIdx(scrollDirection, rowVisibleEndIdx, rowsCount);\n    const totalNumberColumns = columns.length;\n    const lastFrozenColumnIndex = findLastFrozenColumnIndex(columns);\n    const nonFrozenColVisibleStartIdx = getNonFrozenVisibleColStartIdx(columns, scrollLeft);\n    const nonFrozenRenderedColumnCount = getNonFrozenRenderedColumnCount(this.props.columnMetrics, this.getDOMNodeOffsetWidth(), scrollLeft);\n    const colVisibleEndIdx = Math.min(nonFrozenColVisibleStartIdx + nonFrozenRenderedColumnCount, totalNumberColumns);\n    const colOverscanStartIdx = getColOverscanStartIdx(scrollDirection, nonFrozenColVisibleStartIdx, lastFrozenColumnIndex);\n    const colOverscanEndIdx = getColOverscanEndIdx(scrollDirection, colVisibleEndIdx, totalNumberColumns);\n    return {\n      height,\n      scrollTop,\n      scrollLeft,\n      rowVisibleStartIdx,\n      rowVisibleEndIdx,\n      rowOverscanStartIdx,\n      rowOverscanEndIdx,\n      colVisibleStartIdx: nonFrozenColVisibleStartIdx,\n      colVisibleEndIdx,\n      colOverscanStartIdx,\n      colOverscanEndIdx,\n      scrollDirection,\n      lastFrozenColumnIndex,\n      isScrolling\n    };\n  }\n\n  resetScrollStateAfterDelay() {\n    this.clearScrollTimer();\n    this.resetScrollStateTimeoutId = window.setTimeout(\n      this.resetScrollStateAfterDelayCallback,\n      500\n    );\n  }\n\n  resetScrollStateAfterDelayCallback = () => {\n    this.resetScrollStateTimeoutId = null;\n    this.setState({ isScrolling: false });\n  };\n\n  updateScroll(scrollParams: ScrollParams) {\n    this.resetScrollStateAfterDelay();\n    const nextScrollState = this.getNextScrollState(scrollParams);\n    this.setState(nextScrollState);\n    return nextScrollState;\n  }\n\n  metricsUpdated = () => {\n    if (!this.viewport.current) {\n      return;\n    }\n\n    const { height } = this.viewport.current.getBoundingClientRect();\n\n    if (height) {\n      const { scrollTop, scrollLeft } = this.state;\n      const { rowHeight, rowsCount } = this.props;\n      this.updateScroll({\n        scrollTop,\n        scrollLeft,\n        height,\n        rowHeight,\n        rowsCount\n      });\n    }\n  };\n\n  componentWillReceiveProps(nextProps: ViewportProps) {\n    const { rowHeight, rowsCount } = nextProps;\n    if (this.props.rowHeight !== nextProps.rowHeight\n      || this.props.minHeight !== nextProps.minHeight) {\n      const { scrollTop, scrollLeft, height } = getGridState(nextProps);\n      this.updateScroll({\n        scrollTop,\n        scrollLeft,\n        height,\n        rowHeight,\n        rowsCount\n      });\n    } else if (this.props.columnMetrics.columns.length !== nextProps.columnMetrics.columns.length) {\n      this.setState(getGridState(nextProps));\n    } else if (this.props.rowsCount !== nextProps.rowsCount) {\n      const { scrollTop, scrollLeft, height } = this.state;\n      this.updateScroll({\n        scrollTop,\n        scrollLeft,\n        height,\n        rowHeight,\n        rowsCount\n      });\n      // Added to fix the hiding of the bottom scrollbar when showing the filters.\n    } else if (this.props.rowOffsetHeight !== nextProps.rowOffsetHeight) {\n      const { scrollTop, scrollLeft } = this.state;\n      // The value of height can be positive or negative and will be added to the current height to cater for changes in the header height (due to the filer)\n      const height = this.state.height + this.props.rowOffsetHeight - nextProps.rowOffsetHeight;\n      this.updateScroll({\n        scrollTop,\n        scrollLeft,\n        height,\n        rowHeight,\n        rowsCount\n      });\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.metricsUpdated);\n    this.metricsUpdated();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.metricsUpdated);\n    this.clearScrollTimer();\n  }\n\n  render() {\n    return (\n      <div\n        className=\"rdg-viewport\"\n        style={{ top: this.props.rowOffsetHeight }}\n        ref={this.viewport}\n      >\n        <Canvas\n          ref={this.canvas}\n          rowKey={this.props.rowKey}\n          totalWidth={this.props.totalWidth}\n          width={this.props.columnMetrics.width}\n          totalColumnWidth={this.props.columnMetrics.totalColumnWidth}\n          rowGetter={this.props.rowGetter}\n          rowsCount={this.props.rowsCount}\n          selectedRows={this.props.selectedRows}\n          columns={this.props.columnMetrics.columns}\n          rowRenderer={this.props.rowRenderer}\n          rowOverscanStartIdx={this.state.rowOverscanStartIdx}\n          rowOverscanEndIdx={this.state.rowOverscanEndIdx}\n          rowVisibleStartIdx={this.state.rowVisibleStartIdx}\n          rowVisibleEndIdx={this.state.rowVisibleEndIdx}\n          colVisibleStartIdx={this.state.colVisibleStartIdx}\n          colVisibleEndIdx={this.state.colVisibleEndIdx}\n          colOverscanStartIdx={this.state.colOverscanStartIdx}\n          colOverscanEndIdx={this.state.colOverscanEndIdx}\n          lastFrozenColumnIndex={this.state.lastFrozenColumnIndex}\n          cellMetaData={this.props.cellMetaData}\n          height={this.state.height}\n          rowHeight={this.props.rowHeight}\n          onScroll={this.onScroll}\n          scrollToRowIndex={this.props.scrollToRowIndex}\n          contextMenu={this.props.contextMenu}\n          rowSelection={this.props.rowSelection}\n          getSubRowDetails={this.props.getSubRowDetails}\n          rowGroupRenderer={this.props.rowGroupRenderer}\n          isScrolling={this.state.isScrolling || false}\n          enableCellSelect={this.props.enableCellSelect}\n          enableCellAutoFocus={this.props.enableCellAutoFocus}\n          cellNavigationMode={this.props.cellNavigationMode}\n          eventBus={this.props.eventBus}\n          RowsContainer={this.props.RowsContainer}\n          editorPortalTarget={this.props.editorPortalTarget}\n          interactionMasksMetaData={this.props.interactionMasksMetaData}\n        />\n      </div>\n    );\n  }\n}\n"]}