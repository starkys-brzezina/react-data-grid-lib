{"version":3,"file":"EditorPortal.js","sourceRoot":"","sources":["EditorPortal.tsx"],"names":[],"mappings":";;;;;;;;;;;;IAAA,+BAAyD;IACzD,uCAAiC;IAOjC,SAAwB,YAAY,CAAC,EAA2B;YAAzB,kBAAM,EAAE,sBAAQ;QACrD,2DAA2D;QACrD,IAAA,+CAA2C,EAA1C,iBAAS,EAAE,oBAA+B,CAAC;QAElD,uBAAe,CAAC;YACd,YAAY,CAAC,IAAI,CAAC,CAAC;QACrB,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,2DAA2D;QAC3D,2CAA2C;QAC3C,IAAI,CAAC,SAAS,EAAE;YACd,OAAO,IAAI,CAAC;SACb;QAED,OAAO,mBAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACjD,CAAC;IAfD,+BAeC","sourcesContent":["import React, { useState, useLayoutEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface Props {\n  children: React.ReactNode;\n  target: Element;\n}\n\nexport default function EditorPortal({ target, children }: Props) {\n  // Keep track of when the modal element is added to the DOM\n  const [isMounted, setIsMounted] = useState(false);\n\n  useLayoutEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  // Don't render the portal until the component has mounted,\n  // So the portal can safely access the DOM.\n  if (!isMounted) {\n    return null;\n  }\n\n  return ReactDOM.createPortal(children, target);\n}\n"]}