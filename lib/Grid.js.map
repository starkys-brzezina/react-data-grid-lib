{"version":3,"file":"Grid.js","sourceRoot":"","sources":["../src/Grid.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Header, { HeaderProps } from './Header';\nimport Viewport, { ViewportProps, ScrollState } from './Viewport';\nimport { isFrozen } from './ColumnUtils';\nimport { Omit } from './common/types';\nimport { DEFINE_SORT } from './common/enums';\n\ntype SharedHeaderProps = Pick<HeaderProps,\n'headerRows'\n| 'onColumnResize'\n| 'draggableHeaderCell'\n| 'getValidFilterValues'\n| 'sortDirection'\n| 'sortColumn'\n| 'onHeaderDrop'\n>;\n\n\nexport interface GridProps extends Omit<ViewportProps, 'onScroll'>, SharedHeaderProps {\n  emptyRowsView?: React.ComponentType<{}>;\n  scrollLeft?: number;\n  onViewportKeydown(e: React.KeyboardEvent<HTMLDivElement>): void;\n  onViewportKeyup(e: React.KeyboardEvent<HTMLDivElement>): void;\n  onSort(columnKey: string, direction: DEFINE_SORT): void;\n  onScroll?(scrollState: ScrollState): void;\n}\n\nexport default class Grid extends React.Component<GridProps> {\n  static displayName = 'Grid';\n\n  private readonly header = React.createRef<Header>();\n  private readonly viewport = React.createRef<Viewport>();\n  private _scrollLeft?: number = undefined;\n\n  _onScroll() {\n    if (this._scrollLeft !== undefined) {\n      this.header.current!.setScrollLeft(this._scrollLeft);\n      if (this.viewport.current) {\n        this.viewport.current.setScrollLeft(this._scrollLeft);\n      }\n    }\n  }\n\n  areFrozenColumnsScrolledLeft(scrollLeft: number) {\n    return scrollLeft > 0 && this.props.columnMetrics.columns.some(c => isFrozen(c));\n  }\n\n  onScroll = (scrollState: ScrollState) => {\n    if (this.props.onScroll) {\n      this.props.onScroll(scrollState);\n    }\n    const { scrollLeft } = scrollState;\n    if (this._scrollLeft !== scrollLeft || this.areFrozenColumnsScrolledLeft(scrollLeft)) {\n      this._scrollLeft = scrollLeft;\n      this._onScroll();\n    }\n  };\n\n  componentDidMount() {\n    this._scrollLeft = this.viewport.current ? this.viewport.current.getScroll().scrollLeft : 0;\n    this._onScroll();\n  }\n\n  componentDidUpdate() {\n    this._onScroll();\n  }\n\n  render() {\n    const { headerRows } = this.props;\n    const EmptyRowsView = this.props.emptyRowsView;\n\n    return (\n      <div className=\"react-grid-Grid\" style={{ minHeight: this.props.minHeight }}>\n        <Header\n          ref={this.header}\n          columnMetrics={this.props.columnMetrics}\n          onColumnResize={this.props.onColumnResize}\n          height={this.props.rowHeight}\n          totalWidth={this.props.totalWidth}\n          headerRows={headerRows}\n          sortColumn={this.props.sortColumn}\n          sortDirection={this.props.sortDirection}\n          draggableHeaderCell={this.props.draggableHeaderCell}\n          onSort={this.props.onSort}\n          onHeaderDrop={this.props.onHeaderDrop}\n          getValidFilterValues={this.props.getValidFilterValues}\n          cellMetaData={this.props.cellMetaData}\n        />\n        {this.props.rowsCount === 0 && isValidElementType(EmptyRowsView) ? (\n          <div className=\"react-grid-Empty\">\n            <EmptyRowsView />\n          </div>\n        ) : (\n          <div\n            onKeyDown={this.props.onViewportKeydown}\n            onKeyUp={this.props.onViewportKeyup}\n          >\n            <Viewport\n              ref={this.viewport}\n              rowKey={this.props.rowKey}\n              rowHeight={this.props.rowHeight}\n              rowRenderer={this.props.rowRenderer}\n              rowGetter={this.props.rowGetter}\n              rowsCount={this.props.rowsCount}\n              selectedRows={this.props.selectedRows}\n              columnMetrics={this.props.columnMetrics}\n              totalWidth={this.props.totalWidth}\n              onScroll={this.onScroll}\n              cellMetaData={this.props.cellMetaData}\n              rowOffsetHeight={this.props.rowOffsetHeight || this.props.rowHeight * headerRows.length}\n              minHeight={this.props.minHeight}\n              scrollToRowIndex={this.props.scrollToRowIndex}\n              contextMenu={this.props.contextMenu}\n              rowSelection={this.props.rowSelection}\n              getSubRowDetails={this.props.getSubRowDetails}\n              rowGroupRenderer={this.props.rowGroupRenderer}\n              enableCellSelect={this.props.enableCellSelect}\n              enableCellAutoFocus={this.props.enableCellAutoFocus}\n              cellNavigationMode={this.props.cellNavigationMode}\n              eventBus={this.props.eventBus}\n              interactionMasksMetaData={this.props.interactionMasksMetaData}\n              RowsContainer={this.props.RowsContainer}\n              editorPortalTarget={this.props.editorPortalTarget}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"]}