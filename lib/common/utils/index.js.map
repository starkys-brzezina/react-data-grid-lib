{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/common/utils/index.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,uCAAkC;IAElC,SAAgB,kBAAkB,CAAC,OAAY;QAC7C,OAAO,mBAAS,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IAFD,gDAEC;IAED,SAAgB,YAAY,CAAC,GAAQ;QACnC,OAAO,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC;IAChD,CAAC;IAFD,oCAEC;IAED,SAAgB,UAAU,CAAI,eAAkB;QAC9C,OAAO,eAAe,IAAI,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,mBAAmB,CAAC;IACtF,CAAC;IAFD,gCAEC;IAED,SAAgB,aAAa,CAAI,GAAM;QACrC,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,GAAG,CAAC,WAAW,KAAK,MAAM,CAAC;IACrE,CAAC;IAFD,sCAEC;IAED,SAAgB,qBAAqB,CAAI,WAAc;QACrD,OAAO,mBAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;IACpD,CAAC;IAFD,sDAEC;IAED,SAAgB,0BAA0B,CAAC,WAAoB;QAC7D,OAAO;YACL,QAAQ,EAAE,WAAW;gBACnB,CAAC,CAAC,UAAC,SAAqC,EAAE,GAAW,IAAK,OAAA,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAlB,CAAkB;gBAC5E,CAAC,CAAC,UAAI,IAAO,EAAE,GAAY,IAAoB,OAAA,IAAI,CAAC,GAAG,CAAC,EAAT,CAAS;SAC3D,CAAC;IACJ,CAAC;IAND,gEAMC;IAEY,QAAA,cAAc,GAAG,mBAAS,CAAC,GAAG,CAAC,KAAK,CAAC","sourcesContent":["import Immutable from 'immutable';\n\nexport function isColumnsImmutable(columns: any): columns is Immutable.List<any> {\n  return Immutable.List.isList(columns);\n}\n\nexport function isEmptyArray(obj: any): boolean {\n  return Array.isArray(obj) && obj.length === 0;\n}\n\nexport function isFunction<T>(functionToCheck: T): boolean {\n  return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n}\n\nexport function isEmptyObject<T>(obj: T): boolean {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}\n\nexport function isImmutableCollection<T>(objToVerify: T): boolean {\n  return Immutable.Iterable.isIterable(objToVerify);\n}\n\nexport function getMixedTypeValueRetriever(isImmutable: boolean) {\n  return {\n    getValue: isImmutable\n      ? (immutable: Immutable.Map<string, any>, key: string) => immutable.get(key)\n      : <T>(item: T, key: keyof T): T[typeof key] => item[key]\n  };\n}\n\nexport const isImmutableMap = Immutable.Map.isMap;\n"]}