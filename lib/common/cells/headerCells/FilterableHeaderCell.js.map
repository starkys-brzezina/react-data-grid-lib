{"version":3,"file":"FilterableHeaderCell.js","sourceRoot":"","sources":["../../../../src/common/cells/headerCells/FilterableHeaderCell.tsx"],"names":[],"mappings":";;;;;;;;;;;;IAAA,+BAAwC;IAGxC,SAAwB,oBAAoB,CAAC,EAAyC;YAAvC,kBAAM,EAAE,sBAAQ;QACvD,IAAA,0CAAwC,EAAvC,kBAAU,EAAE,qBAA2B,CAAC;QAE/C,SAAS,YAAY,CAAC,KAA0C;YACtD,IAAA,0BAAK,CAAkB;YAC/B,IAAM,UAAU,GAAG,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBACtC,IAAI,EAAE,CAAC;oBACP,KAAK,OAAA;iBACN,CAAC,CAAC;YACH,aAAa,CAAC,UAAU,CAAC,CAAC;YAC1B,IAAI,QAAQ,EAAE;gBACZ,QAAQ,CAAC;oBACP,UAAU,YAAA,EAAE,MAAM,QAAA,EAAE,YAAY,cAAA,EAAE,QAAQ,EAAE,KAAK;iBAClD,CAAC,CAAC;aACJ;QACH,CAAC;QAED,SAAS,YAAY,CAAC,GAAY,EAAE,YAA4B,EAAE,SAAiB;YACjF,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM;gBAAE,OAAO,IAAI,CAAC;YAEjD,iCAAiC;YACjC,IAAM,KAAK,GAAG,GAAG,CAAC,SAAS,CAAW,CAAC;YACvC,IAAM,KAAK,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAe,EAAE,IAAI,CAAC,CAAC;YAC3E,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAChC,CAAC;QAED,IAAI,MAAM,CAAC,UAAU,KAAK,KAAK,EAAE;YAC/B,OAAO,0CAAO,CAAC;SAChB;QAED,OAAO,CACL,uCAAK,SAAS,EAAC,YAAY;YACzB,yCACE,GAAG,EAAE,mBAAiB,MAAM,CAAC,GAAK,EAClC,SAAS,EAAC,uBAAuB,EACjC,WAAW,EAAC,QAAQ,EACpB,KAAK,EAAE,UAAU,EACjB,QAAQ,EAAE,YAAY,GACtB,CACE,CACP,CAAC;IACJ,CAAC;IAzCD,uCAyCC","sourcesContent":["import React, { useState } from 'react';\nimport { FilterRendererProps, RowData, AddFilterEvent } from '../../types';\n\nexport default function FilterableHeaderCell({ column, onChange }: FilterRendererProps) {\n  const [filterTerm, setFilterTerm] = useState();\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { value } = event.target;\n    const filterTerm = value === '' ? [] : [{\n      type: 0,\n      value\n    }];\n    setFilterTerm(filterTerm);\n    if (onChange) {\n      onChange({\n        filterTerm, column, filterValues, rawValue: value\n      });\n    }\n  }\n\n  function filterValues(row: RowData, columnFilter: AddFilterEvent, columnKey: string): boolean {\n    if (!columnFilter.filterTerm.length) return true;\n\n    // implement default filter logic\n    const value = row[columnKey] as string;\n    const regex = new RegExp(columnFilter.filterTerm[0].value as string, 'gi');\n    return !!(value.match(regex));\n  }\n\n  if (column.filterable === false) {\n    return <div />;\n  }\n\n  return (\n    <div className=\"form-group\">\n      <input\n        key={`header-filter-${column.key}`}\n        className=\"form-control input-sm\"\n        placeholder=\"Search\"\n        value={filterTerm}\n        onChange={handleChange}\n      />\n    </div>\n  );\n}\n"]}