import * as React from 'react';
import RowsContainer, { RowsContainerProps } from './RowsContainer';
import { EventBus } from './masks';
import { CellNavigationMode } from './common/enums';
import { CalculatedColumn, RowData, Position, RowGetter, CellMetaData, ScrollPosition, SubRowDetails, RowRenderer, InteractionMasksMetaData, RowRendererProps, RowSelection } from './common/types';
export interface Props {
    rowRenderer?: React.ReactElement | React.ComponentType;
    rowHeight: number;
    height: number;
    width?: number;
    totalWidth?: number | string;
    style?: string;
    className?: string;
    rowOverscanStartIdx: number;
    rowOverscanEndIdx: number;
    rowVisibleStartIdx: number;
    rowVisibleEndIdx: number;
    colVisibleStartIdx: number;
    colVisibleEndIdx: number;
    colOverscanStartIdx: number;
    colOverscanEndIdx: number;
    rowsCount: number;
    rowGetter: RowGetter;
    columns: CalculatedColumn[];
    cellMetaData: CellMetaData;
    selectedRows?: RowData[];
    rowKey: string;
    scrollToRowIndex?: number;
    contextMenu?: React.ReactElement;
    rowSelection?: RowSelection;
    rowGroupRenderer?: React.ComponentType;
    isScrolling: boolean;
    length?: number;
    enableCellSelect: boolean;
    enableCellAutoFocus: boolean;
    cellNavigationMode: CellNavigationMode;
    eventBus: EventBus;
    editorPortalTarget: Element;
    RowsContainer: React.ComponentType<RowsContainerProps>;
    lastFrozenColumnIndex?: number;
    totalColumnWidth: number;
    interactionMasksMetaData: InteractionMasksMetaData;
    onScroll(position: ScrollPosition): void;
    getSubRowDetails?(rowIdx: RowData): SubRowDetails;
}
declare type RendererProps = Pick<Props, 'rowVisibleStartIdx' | 'rowVisibleEndIdx' | 'columns' | 'cellMetaData' | 'colVisibleStartIdx' | 'colVisibleEndIdx' | 'colOverscanEndIdx' | 'colOverscanStartIdx' | 'lastFrozenColumnIndex' | 'isScrolling'> & {
    ref(row: (RowRenderer & React.Component<RowRendererProps>) | null): void;
    key: number;
    idx: number;
    row: RowData;
    subRowDetails?: SubRowDetails;
    height: number;
    isSelected: boolean;
    scrollLeft: number;
};
export default class Canvas extends React.PureComponent<Props> {
    static displayName: string;
    static defaultProps: {
        RowsContainer: typeof RowsContainer;
    };
    private readonly canvas;
    private readonly interactionMasks;
    private readonly rows;
    private unsubscribeScrollToColumn;
    private _scroll;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: Props): void;
    handleScroll: (e: React.UIEvent<HTMLDivElement>) => void;
    onHitBottomCanvas: () => void;
    onHitTopCanvas: () => void;
    handleHitColummBoundary: ({ idx }: Position) => void;
    scrollToRow(scrollToRowIndex: number): void;
    scrollToColumn(idx: number): void;
    getRows(rowOverscanStartIdx: number, rowOverscanEndIdx: number): {
        row: RowData;
        subRowDetails: SubRowDetails<unknown> | undefined;
    }[];
    getScroll(): {
        scrollTop: number;
        scrollLeft: number;
    };
    getClientScrollTopOffset(node: HTMLDivElement): number;
    isRowSelected(idx: number, row: RowData): boolean;
    setScrollLeft(scrollLeft: number): void;
    getRowByRef: (i: number) => (RowRenderer & React.Component<RowRendererProps<unknown, unknown>, {}, any>) | undefined;
    getRowTop: (rowIdx: number) => number;
    getRowHeight: (rowIdx: number) => number;
    getRowColumns: (rowIdx: number) => CalculatedColumn<unknown, unknown>[];
    renderCustomRowRenderer(props: RendererProps): JSX.Element;
    renderGroupRow(props: RendererProps): JSX.Element;
    renderRow(props: RendererProps): JSX.Element;
    renderPlaceholder(key: string, height: number): JSX.Element;
    render(): JSX.Element;
}
export {};
