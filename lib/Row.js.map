{"version":3,"file":"Row.js","sourceRoot":"","sources":["../src/Row.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\n\nimport rowComparer from './common/utils/RowComparer';\nimport Cell from './Cell';\nimport { isFrozen } from './ColumnUtils';\nimport { RowRenderer, RowRendererProps, CellRenderer, CellRendererProps, CalculatedColumn } from './common/types';\n\nexport default class Row extends React.Component<RowRendererProps> implements RowRenderer {\n  static displayName = 'Row';\n\n  static defaultProps = {\n    cellRenderer: Cell,\n    isSelected: false,\n    height: 35\n  };\n\n  private readonly row = React.createRef<HTMLDivElement>();\n  private readonly cells = new Map<string, CellRenderer>();\n\n  shouldComponentUpdate(nextProps: RowRendererProps) {\n    return rowComparer(nextProps, this.props);\n  }\n\n  handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {\n    // Prevent default to allow drop\n    e.preventDefault();\n    const { idx, cellMetaData } = this.props;\n    cellMetaData.onDragEnter(idx);\n  };\n\n  handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'copy';\n  };\n\n  handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    // The default in Firefox is to treat data in dataTransfer as a URL and perform navigation on it, even if the data type used is 'text'\n    // To bypass this, we need to capture and prevent the drop event.\n    e.preventDefault();\n  };\n\n  getCell(column: CalculatedColumn) {\n    const Renderer = this.props.cellRenderer;\n    const { idx, cellMetaData, isScrolling, row, isSelected, scrollLeft, lastFrozenColumnIndex } = this.props;\n    const { key } = column;\n\n    const cellProps: CellRendererProps & { ref: (cell: CellRenderer | null) => void } = {\n      ref: (cell) => cell ? this.cells.set(key, cell) : this.cells.delete(key),\n      idx: column.idx,\n      rowIdx: idx,\n      height: this.getRowHeight(),\n      column,\n      cellMetaData,\n      value: this.getCellValue(key || String(column.idx)), // TODO: fix idx type\n      rowData: row,\n      isRowSelected: isSelected,\n      expandableOptions: this.getExpandableOptions(key),\n      isScrolling,\n      scrollLeft,\n      lastFrozenColumnIndex\n    };\n\n    return <Renderer key={`${key}-${idx}`} {...cellProps} />;\n  }\n\n  getCells() {\n    const { colOverscanStartIdx, colOverscanEndIdx, columns } = this.props;\n    const frozenColumns = columns.filter(c => isFrozen(c));\n    const nonFrozenColumn = columns.slice(colOverscanStartIdx, colOverscanEndIdx + 1).filter(c => !isFrozen(c));\n    return nonFrozenColumn.concat(frozenColumns).map(c => this.getCell(c));\n  }\n\n  getRowTop(): number {\n    const { current } = this.row;\n    return current ? current.offsetTop : 0;\n  }\n\n  getRowHeight(): number {\n    return this.props.height;\n  }\n\n  getCellValue(key: string) {\n    const { isSelected, row } = this.props;\n    if (key === 'select-row') {\n      return isSelected;\n    }\n\n    if (typeof row.get === 'function') {\n      return row.get(key);\n    }\n\n    return row[key];\n  }\n\n  getExpandableOptions(columnKey: string) {\n    const { subRowDetails } = this.props;\n    if (!subRowDetails) return;\n\n    const { field, expanded, children, treeDepth } = subRowDetails;\n    return {\n      canExpand: field === columnKey && ((children && children.length > 0) || subRowDetails.group === true),\n      field,\n      expanded,\n      children,\n      treeDepth,\n      subRowDetails\n    };\n  }\n\n  setScrollLeft(scrollLeft: number) {\n    for (const column of this.props.columns) {\n      const { key } = column;\n      if (isFrozen(column) && this.cells.has(key)) {\n        this.cells.get(key)!.setScrollLeft(scrollLeft);\n      }\n    }\n  }\n\n  render() {\n    const className = classNames(\n      'react-grid-Row',\n      `react-grid-Row--${this.props.idx % 2 === 0 ? 'even' : 'odd'}`,\n      { 'row-selected': this.props.isSelected },\n      this.props.extraClasses,\n      { 'rdg-scrolling': this.props.isScrolling }\n    );\n\n    return (\n      <div\n        ref={this.row}\n        className={className}\n        style={{ height: this.getRowHeight() }}\n        onDragEnter={this.handleDragEnter}\n        onDragOver={this.handleDragOver}\n        onDrop={this.handleDrop}\n      >\n        {this.getCells()}\n      </div>\n    );\n  }\n}\n"]}