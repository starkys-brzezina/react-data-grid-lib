{"version":3,"file":"InteractionMasks.js","sourceRoot":"","sources":["../../src/masks/InteractionMasks.tsx"],"names":[],"mappings":";;;;;;;;;;;;IAAA,+BAA4C;IAC5C,qCAAqC;IAErC,aAAa;IACb,iDAA4C;IAC5C,2DAAsD;IACtD,uCAAkC;IAClC,uCAAuD;IACvD,2CAAsC;IACtC,qEAAgE;IAChE,+DAA0D;IAE1D,QAAQ;IACR,+DAAkF;IAClF,gEAWoC;IACpC,8CAA0C;IAC1C,wCAAmC;IAEnC,QAAQ;IACR,yCAAgF;IAIhF,IAAM,kBAAkB,GAAG,CAAC,CAAC;IA4C7B;QAA8C,4CAA6B;QAA3E;YAAA,qEAioBC;YA9nBU,WAAK,GAAoB;gBAChC,gBAAgB,EAAE;oBAChB,GAAG,EAAE,CAAC,CAAC;oBACP,MAAM,EAAE,CAAC,CAAC;iBACX;gBACD,aAAa,EAAE;oBACb,OAAO,EAAE;wBACP,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;qBACpB;oBACD,WAAW,EAAE;wBACX,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;qBACpB;oBACD,SAAS,EAAE,IAAI;oBACf,UAAU,EAAE,IAAI;oBAChB,UAAU,EAAE,KAAK;iBAClB;gBACD,cAAc,EAAE,IAAI;gBACpB,eAAe,EAAE,IAAI;gBACrB,cAAc,EAAE,IAAI;gBACpB,eAAe,EAAE,KAAK;gBACtB,mBAAmB,EAAE,IAAI;aAC1B,CAAC;YAEe,mBAAa,GAAG,eAAK,CAAC,SAAS,EAAkB,CAAC;YAClD,cAAQ,GAAG,eAAK,CAAC,SAAS,EAAkB,CAAC;YAEtD,8BAAwB,GAAsB,EAAE,CAAC;YA4FzD,eAAS,GAAG,UAAC,CAAsC;gBACjD,IAAI,iCAAiB,CAAC,CAAC,CAAC,EAAE;oBACxB,KAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;iBAC5B;qBAAM,IAAI,CAAC,CAAC,OAAO,KAAK,kBAAQ,CAAC,MAAM,EAAE;oBACxC,KAAI,CAAC,aAAa,EAAE,CAAC;iBACtB;qBAAM,IAAI,CAAC,CAAC,OAAO,KAAK,kBAAQ,CAAC,GAAG,EAAE;oBACrC,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;iBACpB;qBAAM,IAAI,KAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC,EAAE;oBAC5C,KAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;iBAC7B;qBAAM,IAAI,8BAAc,CAAC,CAAC,CAAC,OAAO,CAAC,IAAK,CAAC,kBAAQ,CAAC,SAAS,EAAE,kBAAQ,CAAC,MAAM,EAAE,kBAAQ,CAAC,KAAK,CAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE;oBAC/H,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;iBACpB;YACH,CAAC,CAAC;YAQF,gBAAU,GAAG,UAAC,KAA2C;gBACvD,IAAI,KAAI,CAAC,sBAAsB,EAAE,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,eAAe,EAAE;oBAChE,KAAI,CAAC,QAAQ,CAAC;wBACZ,eAAe,EAAE,IAAI;wBACrB,mBAAmB,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI;wBAC7C,cAAc,EAAE,KAAI,CAAC,iBAAiB,EAAE;qBACzC,CAAC,CAAC;iBACJ;YACH,CAAC,CAAC;YAuBF,aAAO,GAAG;gBACF,IAAA,iCAA6C,EAA3C,YAAG,EAAE,kBAAsC,CAAC;gBACpD,IAAI,GAAG,KAAK,CAAC,CAAC,IAAI,MAAM,KAAK,CAAC,CAAC,EAAE;oBAC/B,KAAI,CAAC,eAAe,EAAE,CAAC;iBACxB;YACH,CAAC,CAAC;YAsNF,gBAAU,GAAG,UAAC,IAAc,EAAE,UAAoB;gBAChD,IAAM,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC;gBAC1D,iDAAiD;gBACjD,IAAI,KAAI,CAAC,KAAK,CAAC,eAAe,EAAE;oBAC9B,KAAI,CAAC,WAAW,EAAE,CAAC;iBACpB;gBACD,KAAI,CAAC,QAAQ,CAAC;oBACZ,IAAI,CAAC,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;wBAAE,OAAO,IAAI,CAAC;oBAEhD,OAAO;wBACL,gBAAgB,EAAE,IAAI;wBACtB,aAAa,EAAE;4BACb,OAAO,EAAE,IAAI;4BACb,WAAW,EAAE,IAAI;4BACjB,SAAS,EAAE,IAAI;4BACf,UAAU,EAAE,IAAI;4BAChB,UAAU,EAAE,KAAK;yBAClB;qBACF,CAAC;gBACJ,CAAC,EAAE,QAAQ,CAAC,CAAC;YACf,CAAC,CAAC;YAYF,8BAAwB,GAAG,UAAC,gBAA0B;gBACpD,KAAI,CAAC,QAAQ,CAAC;oBACZ,aAAa,EAAE,KAAI,CAAC,6BAA6B,CAAC,gBAAgB,EAAE,IAAI,CAAC;oBACzE,gBAAgB,kBAAA;iBACjB,EAAE;oBACD,IAAI,KAAI,CAAC,KAAK,CAAC,2BAA2B,EAAE;wBAC1C,KAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,KAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;qBAClE;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;YAEF,8BAAwB,GAAG,UAAC,YAAsB,EAAE,cAAwB,EAAE,QAAqB;gBACjG,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,IAAI,CAAC,cAAc,IAAI,CAAC,KAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,EAAE;oBACrG,OAAO;iBACR;gBAED,IAAM,SAAS,GAAG,KAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,IAAI,KAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;gBACpF,IAAM,OAAO,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,CAAC,CAAC;gBACxE,IAAM,OAAO,GAAG,CAAC,SAAS,CAAC,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,GAAG,CAAC,EAAL,CAAK,CAAC,CAAC;gBAC9E,IAAM,OAAO,GAAa,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;gBAClE,IAAM,WAAW,GAAa,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;gBAEtE,IAAM,aAAa,wBACd,KAAI,CAAC,KAAK,CAAC,aAAa;oBAC3B,sFAAsF;oBACtF,SAAS,EAAE,KAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,IAAI,KAAI,CAAC,KAAK,CAAC,gBAAgB;oBAC5E,0EAA0E;oBAC1E,OAAO,SAAA;oBACP,WAAW,aAAA,EACX,UAAU,EAAE,YAAY,GACzB,CAAC;gBAEF,KAAI,CAAC,QAAQ,CAAC;oBACZ,aAAa,eAAA;iBACd,EAAE;oBACD,IAAI,KAAI,CAAC,KAAK,CAAC,2BAA2B,EAAE;wBAC1C,KAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,KAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;qBAClE;oBACD,IAAI,QAAQ,EAAE;wBACZ,QAAQ,EAAE,CAAC;qBACZ;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;YAEF,4BAAsB,GAAG;gBACvB,IAAM,aAAa,wBAAQ,KAAI,CAAC,KAAK,CAAC,aAAa,IAAE,UAAU,EAAE,KAAK,GAAE,CAAC;gBACzE,KAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,eAAA,EAAE,EAAE;oBAC/B,IAAI,KAAI,CAAC,KAAK,CAAC,6BAA6B,EAAE;wBAC5C,KAAI,CAAC,KAAK,CAAC,6BAA6B,CAAC,KAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;qBACpE;oBAED,gEAAgE;oBAChE,KAAI,CAAC,KAAK,EAAE,CAAC;gBACf,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;YAMF,qBAAe,GAAG,UAAC,CAAkC;gBAC3C,IAAA,+CAAgB,CAAgB;gBACxC,6EAA6E;gBAC7E,IAAI,gBAAgB,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE;oBAC7B,CAAC,CAAC,YAAY,CAAC,aAAa,GAAG,MAAM,CAAC;oBACtC,8DAA8D;oBAC9D,IAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;oBACtD,IAAI;wBACF,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;qBACpD;oBAAC,OAAO,EAAE,EAAE;wBACX,4DAA4D;wBAC5D,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;qBAC9C;oBACD,KAAI,CAAC,QAAQ,CAAC;wBACZ,eAAe,uBACV,gBAAgB,IACnB,UAAU,EAAE,gBAAgB,CAAC,MAAM,GACpC;qBACF,CAAC,CAAC;iBACJ;YACH,CAAC,CAAC;YAEF,qBAAe,GAAG,UAAC,UAAkB;gBACnC,KAAI,CAAC,QAAQ,CAAC,UAAC,EAAmB;wBAAjB,oCAAe;oBAC9B,IAAI,eAAe,EAAE;wBACnB,OAAO,EAAE,eAAe,uBAAO,eAAe,IAAE,UAAU,YAAA,GAAE,EAAE,CAAC;qBAChE;oBACD,OAAO,IAAI,CAAC;gBACd,CAAC,CAAC,CAAC;YACL,CAAC,CAAC;YAEF,mBAAa,GAAG;;gBACN,IAAA,6CAAe,CAAgB;gBACvC,IAAI,eAAe,KAAK,IAAI;oBAAE,OAAO;gBAE7B,IAAA,+BAAM,EAAE,uCAAU,CAAqB;gBACzC,IAAA,gBAAsD,EAApD,oBAAO,EAAE,wCAAiB,EAAE,wBAAwB,CAAC;gBAC7D,IAAM,MAAM,GAAG,qCAAiB,CAAC,EAAE,gBAAgB,EAAE,eAAe,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;gBACjF,IAAM,KAAK,GAAG,wCAAoB,CAAC,EAAE,gBAAgB,EAAE,eAAe,EAAE,OAAO,SAAA,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;gBAC9F,IAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC;gBAC3B,IAAM,OAAO,GAAG,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC;gBAC1D,IAAM,KAAK,GAAG,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC;gBAExD,iBAAiB,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,YAAI,GAAC,OAAO,IAAG,KAAK,OAAI,qBAAa,CAAC,SAAS,CAAC,CAAC;gBAE1F,KAAI,CAAC,QAAQ,CAAC;oBACZ,eAAe,EAAE,IAAI;iBACtB,CAAC,CAAC;YACL,CAAC,CAAC;YAEF,6BAAuB,GAAG;gBAClB,IAAA,gBAAmD,EAAjD,oDAAuB,EAAE,wBAAwB,CAAC;gBAClD,IAAA,+CAAgB,CAAgB;gBAChC,IAAA,0BAAG,EAAE,gCAAM,CAAsB;gBACzC,IAAM,OAAO,GAAG,kCAAc,CAAC,EAAE,gBAAgB,kBAAA,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;gBAChE,uBAAuB,CAAC,EAAE,GAAG,KAAA,EAAE,MAAM,QAAA,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;YACpD,CAAC,CAAC;YAEF,cAAQ,GAAG,UAAC,IAAiB;gBAC3B,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC1B,KAAI,CAAC,WAAW,EAAE,CAAC;YACrB,CAAC,CAAC;YAEF,oBAAc,GAAG;gBACf,KAAI,CAAC,WAAW,EAAE,CAAC;YACrB,CAAC,CAAC;YAEF,2BAAqB,GAAG,UAAC,gBAA0B,EAAE,cAAwB;gBACrE,IAAA,gBAAyF,EAAvF,0BAAU,EAAE,8BAAY,EAAE,wBAAS,EAAE,gCAAa,EAAE,wBAAmC,CAAC;gBAChG,IAAM,OAAO,GAAG,cAAc,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,aAAa,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;gBACtF,IAAM,GAAG,GAAG,SAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;gBAC/C,IAAM,SAAS,GAAG,YAAY,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;gBACxD,IAAM,SAAS,GAAG,yCAAqB,CAAC,EAAE,gBAAgB,kBAAA,EAAE,OAAO,SAAA,EAAE,UAAU,YAAA,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;gBAC9F,SAAS,CAAC,GAAG,GAAG,GAAG,CAAC;gBACpB,OAAO,SAAS,CAAC;YACnB,CAAC,CAAC;;QAmFJ,CAAC;QAlmBC,6CAAkB,GAAlB,UAAmB,SAAgB,EAAE,SAAgB;YAC7C,IAAA,eAAkD,EAAhD,sCAAgB,EAAE,oCAA8B,CAAC;YACjD,IAAA,iDAAsC,EAAE,+CAAoC,CAAe;YACnG,IAAM,yBAAyB,GAAG,gBAAgB,KAAK,oBAAoB,IAAI,CAAC,gBAAgB,CAAC,MAAM,KAAK,oBAAoB,CAAC,MAAM,IAAI,gBAAgB,CAAC,GAAG,KAAK,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC9L,IAAM,cAAc,GAAG,eAAe,KAAK,mBAAmB,IAAI,CAAC,eAAe,CAAC;YAEnF,IAAI,yBAAyB,EAAE;gBAC7B,mDAAmD;gBAC7C,IAAA,eAAiD,EAA/C,kCAAc,EAAE,sCAA+B,CAAC;gBACxD,IAAI,gBAAgB,IAAI,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,EAAE;oBACrE,gBAAgB,sBAAM,oBAAoB,EAAG,CAAC;iBAC/C;gBAED,IAAI,cAAc,IAAI,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,EAAE;oBAC/D,cAAc,sBAAM,gBAAgB,EAAG,CAAC;iBACzC;aACF;YAED,IAAI,CAAC,yBAAyB,IAAI,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,IAAI,cAAc,EAAE;gBAC9F,IAAI,CAAC,KAAK,EAAE,CAAC;aACd;QACH,CAAC;QAED,4CAAiB,GAAjB;YACQ,IAAA,eAA8C,EAA5C,sBAAQ,EAAE,4CAAkC,CAAC;YAErD,IAAI,CAAC,wBAAwB,GAAG;gBAC9B,QAAQ,CAAC,SAAS,CAAC,kBAAU,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC;gBAC3D,QAAQ,CAAC,SAAS,CAAC,kBAAU,CAAC,YAAY,EAAE,IAAI,CAAC,wBAAwB,CAAC;gBAC1E,QAAQ,CAAC,SAAS,CAAC,kBAAU,CAAC,aAAa,EAAE,IAAI,CAAC,wBAAwB,CAAC;gBAC3E,QAAQ,CAAC,SAAS,CAAC,kBAAU,CAAC,UAAU,EAAE,IAAI,CAAC,sBAAsB,CAAC;gBACtE,QAAQ,CAAC,SAAS,CAAC,kBAAU,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC;aAChE,CAAC;YAEF,IAAI,mBAAmB,IAAI,IAAI,CAAC,eAAe,EAAE,EAAE;gBACjD,IAAI,CAAC,eAAe,EAAE,CAAC;aACxB;QACH,CAAC;QAED,+CAAoB,GAApB;YACE,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAE,EAAH,CAAG,CAAC,CAAC;QAClD,CAAC;QAED,4CAAiB,GAAjB;YACE,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO;gBAAE,OAAO,IAAI,CAAC;YAErC,IAAA,kDAAkB,CAAgB;YACpC,IAAA,uDAAuG,EAArG,2BAAuB,EAAE,yBAA4E,CAAC;YAC9G,IAAI,kBAAkB,KAAK,QAAQ,CAAC,IAAI,EAAE;gBAClC,IAAA,0DAAiF,EAA/E,4BAAU,EAAE,0BAAmE,CAAC;gBACxF,OAAO;oBACL,IAAI,EAAE,iBAAiB,GAAG,YAAU;oBACpC,GAAG,EAAE,gBAAgB,GAAG,WAAS;iBAClC,CAAC;aACH;YAEK,IAAA,+CAA6F,EAA3F,0BAAsB,EAAE,wBAAmE,CAAC;YAC5F,IAAA,0CAAU,EAAE,wCAAS,CAAwB;YACrD,OAAO;gBACL,IAAI,EAAE,iBAAiB,GAAG,gBAAgB,GAAG,UAAU;gBACvD,GAAG,EAAE,gBAAgB,GAAG,eAAe,GAAG,SAAS;aACpD,CAAC;QACJ,CAAC;QAED,2CAAgB,GAAhB,UAAiB,IAA2B,EAAE,QAAyB,EAAE,UAAkB;YACzF,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ;gBAAE,OAAO;YAEvB,IAAA,kBAAG,EAAE,wBAAM,CAAc;YACjC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,MAAM,IAAI,CAAC,CAAC;gBAAE,OAAO;YAEvC,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACvC,IAAI,CAAC,sBAAQ,CAAC,MAAM,CAAC;gBAAE,OAAO;YAE9B,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACzC,IAAM,IAAI,GAAG,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC;YACtC,IAAM,SAAS,GAAG,eAAa,IAAI,YAAO,GAAG,QAAK,CAAC;YACnD,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,SAAS,EAAE;gBACtC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC;aAClC;QACH,CAAC;QAED;;;WAGG;QACH,wCAAa,GAAb,UAAc,UAAkB;YAC9B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;YAC3F,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;QACtF,CAAC;QAgBD,iDAAsB,GAAtB;YACQ,IAAA,eAA4E,EAA1E,sCAAgB,EAAE,oBAAO,EAAE,wBAAS,EAAE,gDAAoC,CAAC;YAC3E,IAAA,8CAAgB,CAAgB;YACxC,OAAO,0CAAsB,CAAC,EAAE,gBAAgB,kBAAA,EAAE,OAAO,SAAA,EAAE,SAAS,WAAA,EAAE,gBAAgB,kBAAA,EAAE,qBAAqB,uBAAA,EAAE,CAAC,CAAC;QACnH,CAAC;QAYD,sCAAW,GAAX;YACE,IAAI,CAAC,QAAQ,CAAC;gBACZ,eAAe,EAAE,KAAK;gBACtB,mBAAmB,EAAE,IAAI;gBACzB,cAAc,EAAE,IAAI;aACrB,CAAC,CAAC;QACL,CAAC;QAED,6CAAkB,GAAlB,UAAmB,EAAgD;gBAA9C,oBAAO;YAC1B,IAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE;gBAC3B,IAAI,OAAO,KAAK,kBAAQ,CAAC,CAAC,EAAE;oBACpB,IAAA,eAAmC,EAAjC,oBAAO,EAAE,wBAAwB,CAAC;oBAClC,IAAA,8CAAgB,CAAgB;oBACxC,IAAM,KAAK,GAAG,wCAAoB,CAAC,EAAE,gBAAgB,kBAAA,EAAE,OAAO,SAAA,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;oBAC7E,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;iBACxB;qBAAM,IAAI,OAAO,KAAK,kBAAQ,CAAC,CAAC,EAAE;oBACjC,IAAI,CAAC,WAAW,EAAE,CAAC;iBACpB;aACF;QACH,CAAC;QASD,qCAAU,GAAV,UAAW,CAAsC;YACzC,IAAA,eAAuD,EAArD,0CAAkB,EAAE,oBAAO,EAAE,wBAAwB,CAAC;YACxD,IAAA,eAAkD,EAAhD,sCAAgB,EAAE,oCAA8B,CAAC;YACzD,yFAAyF;YACzF,IAAI,SAAS,KAAK,CAAC,EAAE;gBACnB,OAAO;aACR;YAED,gFAAgF;YAChF,IAAI,+BAAW,CAAC,CAAC,EAAE,EAAE,kBAAkB,oBAAA,EAAE,OAAO,SAAA,EAAE,SAAS,WAAA,EAAE,gBAAgB,kBAAA,EAAE,CAAC,EAAE;gBAChF,IAAI,eAAe,EAAE;oBACnB,IAAI,CAAC,WAAW,EAAE,CAAC;oBACnB,OAAO;iBACR;gBAED,6CAA6C;gBAC7C,IAAI,CAAC,QAAQ,CAAC,EAAE,gBAAgB,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gBAC7D,OAAO;aACR;YAED,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC;QAED,wCAAa,GAAb;YACE,IAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE;gBAC3B,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACxB,IAAI,CAAC,WAAW,EAAE,CAAC;aACpB;QACH,CAAC;QAED,2CAAgB,GAAhB;YACE,OAAO,IAAI,CAAC,KAAK,CAAC,eAAe,KAAK,IAAI,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9E,CAAC;QAED,qCAAU,GAAV,UAAW,KAAU;YACb,IAAA,gCAA6C,EAA3C,kBAAM,EAAE,YAAmC,CAAC;YACpD,IAAI,CAAC,QAAQ,CAAC;gBACZ,cAAc,EAAE,EAAE,MAAM,QAAA,EAAE,GAAG,KAAA,EAAE,KAAK,OAAA,EAAE;aACvC,CAAC,CAAC;QACL,CAAC;QAED,2CAAgB,GAAhB;YACE,IAAI,CAAC,QAAQ,CAAC,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;QAC1C,CAAC;QAED,sCAAW,GAAX;;YACQ,IAAA,eAA4D,EAA1D,oBAAO,EAAE,oCAAe,EAAE,wCAAgC,CAAC;YAC7D,IAAA,eAAiD,EAA/C,sCAAgB,EAAE,kCAA6B,CAAC;YAChD,IAAA,+BAAa,CAAsB;YAE3C,IAAI,cAAc,KAAK,IAAI,EAAE;gBAC3B,OAAO;aACR;YAED,IAAM,OAAO,GAAG,qCAAiB,CAAC,EAAE,gBAAgB,kBAAA,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC,GAAG,CAAC;YAC7D,IAAA,+BAAe,EAAE,4BAAK,CAAoB;YAElD,IAAI,eAAe,EAAE;gBACnB,eAAe,CAAC;oBACd,OAAO,SAAA;oBACP,MAAM,EAAE,KAAK;oBACb,OAAO,SAAA;oBACP,KAAK,OAAA;oBACL,KAAK,OAAA;iBACN,CAAC,CAAC;aACJ;YAED,iBAAiB,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,YAAI,GAAC,OAAO,IAAG,KAAK,OAAI,qBAAa,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QACpG,CAAC;QAED,oDAAyB,GAAzB,UAA0B,CAAsC;YAC9D,OAAO,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC;QACnD,CAAC;QAED,mDAAwB,GAAxB,UAAyB,CAAsC;YACvD,IAAA,eAAyK,EAAvK,sCAAgB,EAAE,0CAAkB,EAAE,sCAAgB,EAAE,0CAAkB,EAAE,4CAAmB,EAAE,0CAAkB,EAAE,wCAAiB,EAAE,sCAA+B,CAAC;YAChL,IAAM,sBAAsB,GAAG,UAAC,IAAc,IAAc,OAAA,IAAI,CAAC,MAAM,IAAI,gBAAgB,GAAG,kBAAkB,EAApD,CAAoD,CAAC;YACjH,IAAM,mBAAmB,GAAG,UAAC,IAAc,IAAc,OAAA,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,kBAAkB,GAAG,CAAC,EAA1D,CAA0D,CAAC;YACpH,IAAM,qBAAqB,GAAG,UAAC,IAAc,IAAc,OAAA,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,IAAI,CAAC,GAAG,IAAI,gBAAgB,GAAG,CAAC,EAAlD,CAAkD,CAAC;YAC9G,IAAM,oBAAoB,GAAG,UAAC,IAAc,IAAc,OAAA,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,IAAI,CAAC,GAAG,IAAI,kBAAkB,GAAG,CAAC,EAApD,CAAoD,CAAC;YAE/G,IAAM,SAAS,GAAc;gBAC3B,OAAO,EAAE,UAAC,OAAO,IAAK,OAAA,sBAAM,OAAO,IAAE,MAAM,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,IAAG,EAA5C,CAA4C;gBAClE,gBAAgB,EAAE,sBAAsB;gBACxC,aAAa,EAAE,mBAAmB;aACnC,CAAC;YACF,IAAM,OAAO,GAAc;gBACzB,OAAO,EAAE,UAAC,OAAO,IAAK,OAAA,sBAAM,OAAO,IAAE,MAAM,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,IAAG,EAA5C,CAA4C;gBAClE,gBAAgB,EAAE,mBAAmB;gBACrC,aAAa,EAAE,gBAAgB;aAChC,CAAC;YACF,IAAM,UAAU,GAAc;gBAC5B,OAAO,EAAE,UAAC,OAAO,IAAK,OAAA,sBAAM,OAAO,IAAE,GAAG,EAAE,OAAO,CAAC,GAAG,GAAG,CAAC,IAAG,EAAtC,CAAsC;gBAC5D,gBAAgB,EAAE,qBAAqB;gBACvC,aAAa,YAAC,IAAI;oBAChB,kBAAkB,CAAC,IAAI,CAAC,CAAC;oBACzB,uFAAuF;oBACvF,IAAI,sBAAsB,CAAC,IAAI,CAAC,EAAE;wBAChC,mBAAmB,CAAC,IAAI,CAAC,CAAC;qBAC3B;gBACH,CAAC;aACF,CAAC;YACF,IAAM,SAAS,GAAc;gBAC3B,OAAO,EAAE,UAAC,OAAO,IAAK,OAAA,sBAAM,OAAO,IAAE,GAAG,EAAE,OAAO,CAAC,GAAG,GAAG,CAAC,IAAG,EAAtC,CAAsC;gBAC5D,gBAAgB,EAAE,oBAAoB;gBACtC,aAAa,YAAC,IAAI;oBAChB,iBAAiB,CAAC,IAAI,CAAC,CAAC;oBACxB,oFAAoF;oBACpF,IAAI,mBAAmB,CAAC,IAAI,CAAC,EAAE;wBAC7B,gBAAgB,CAAC,IAAI,CAAC,CAAC;qBACxB;gBACH,CAAC;aACF,CAAC;YAEF,IAAI,CAAC,CAAC,OAAO,KAAK,kBAAQ,CAAC,GAAG,EAAE;gBAC9B,OAAO,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC;aACrD;YAED,QAAQ,CAAC,CAAC,GAAG,EAAE;gBACb,KAAK,WAAW,CAAC,CAAC,OAAO,SAAS,CAAC;gBACnC,KAAK,SAAS,CAAC,CAAC,OAAO,OAAO,CAAC;gBAC/B,KAAK,YAAY,CAAC,CAAC,OAAO,UAAU,CAAC;gBACrC,KAAK,WAAW,CAAC,CAAC,OAAO,SAAS,CAAC;gBACnC,OAAO,CAAC,CAAC,OAAO,IAAI,CAAC;aACtB;QACH,CAAC;QAED,8CAAmB,GAAnB,UAAoB,CAAsC;YACxD,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,IAAM,KAAK,GAAG,CAAC,CAAC,OAAO,KAAK,kBAAQ,CAAC,GAAG,CAAC;YACzC,IAAM,OAAO,GAAG,CAAC,CAAC,QAAQ,CAAC;YAE3B,IAAI,KAAK,EAAE;gBACT,IAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,KAAK,0BAAkB,CAAC,IAAI;oBAClF,CAAC,CAAC,0BAAkB,CAAC,UAAU;oBAC/B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;gBAClC,IAAI,CAAC,uBAAuB,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC;aACrD;iBAAM,IAAI,OAAO,EAAE;gBAClB,IAAI,CAAC,qCAAqC,CAAC,CAAC,CAAC,CAAC;aAC/C;iBAAM;gBACL,IAAI,CAAC,uBAAuB,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;aAChE;QACH,CAAC;QAED,kDAAuB,GAAvB,UAAwB,CAAsC,EAAE,kBAAsC;YACpG,IAAM,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC;YACtD,IAAI,YAAY,EAAE;gBAChB,IAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;gBACpD,IAAM,IAAI,GAAG,IAAI,CAAC,0CAA0C,CAAC,YAAY,EAAE,eAAe,EAAE,kBAAkB,CAAC,CAAC;gBAChH,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;gBAC/C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;aACvB;QACH,CAAC;QAED,gEAAqC,GAArC,UAAsC,CAAsC;YAA5E,iBASC;YARC,IAAM,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC;YACtD,IAAI,YAAY,EAAE;gBACR,IAAA,kDAAkB,CAAgB;gBAC1C,IAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;gBAC3F,IAAM,IAAI,GAAG,IAAI,CAAC,0CAA0C,CAAC,YAAY,EAAE,eAAe,EAAE,kBAAkB,CAAC,CAAC;gBAChH,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;gBAC/C,IAAI,CAAC,wBAAwB,sBAAM,IAAI,GAAI,IAAI,EAAE,cAAQ,KAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;aAC5F;QACH,CAAC;QAED,qEAA0C,GAA1C,UAA2C,YAAuB,EAAE,eAAyB,EAAE,kBAAsC;YAC3H,IAAA,8BAAO,CAAkB;YACjC,IAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;YACxC,IAAA,eAAmC,EAAjC,oBAAO,EAAE,wBAAwB,CAAC;YAC1C,OAAO,+CAA2B,CAAC;gBACjC,OAAO,SAAA;gBACP,SAAS,WAAA;gBACT,kBAAkB,oBAAA;gBAClB,YAAY,cAAA;aACb,CAAC,CAAC;QACL,CAAC;QAED,gDAAqB,GAArB,UAAsB,YAAuB,EAAE,IAA8B;YACnE,IAAA,gDAAgB,EAAE,0CAAa,CAAkB;YACjD,IAAA,0CAAiB,EAAE,qDAAU,CAAU;YAC/C,IAAI,gBAAgB,CAAC,OAAO,CAAC,IAAI,iBAAiB,EAAE;gBAClD,aAAa,CAAC,OAAO,CAAC,CAAC;aACxB;QACH,CAAC;QAED,6CAAkB,GAAlB,UAAmB,EAAyB;gBAAvB,YAAG,EAAE,kBAAM;YACxB,IAAA,eAAmC,EAAjC,oBAAO,EAAE,wBAAwB,CAAC;YAC1C,OAAO,MAAM,IAAI,CAAC,IAAI,MAAM,GAAG,SAAS,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC;QAC/E,CAAC;QAED,yCAAc,GAAd;YACE,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAC9D,CAAC;QAED,oCAAS,GAAT;YACE,OAAO,QAAQ,CAAC,aAAa,KAAK,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;QAC/D,CAAC;QAED,0CAAe,GAAf;YACE,OAAO,QAAQ,CAAC,aAAa,KAAK,QAAQ,CAAC,IAAI,CAAC;QAClD,CAAC;QAED,gCAAK,GAAL;YACE,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE;gBACnD,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;aACpC;QACH,CAAC;QAED,0CAAe,GAAf;YACE,IAAI,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;QACzC,CAAC;QAwBD,wDAA6B,GAA7B,UAA8B,YAAsB,EAAE,UAAmB;YACvE,OAAO;gBACL,OAAO,EAAE,YAAY;gBACrB,WAAW,EAAE,YAAY;gBACzB,SAAS,EAAE,YAAY;gBACvB,UAAU,EAAE,YAAY;gBACxB,UAAU,YAAA;aACX,CAAC;QACJ,CAAC;QA0DD,wCAAa,GAAb;YACE,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACvC,CAAC;QA+ED,qDAA0B,GAA1B;YACE,OAAO,CACL,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,CACtD,8BAAC,uBAAa,uBACR,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,IAAI,CAAC,IACjE,GAAG,EAAE,IAAI,CAAC,aAAa,KAEtB,IAAI,CAAC,aAAa,EAAE,IAAI,CACvB,8BAAC,oBAAU,IACT,WAAW,EAAE,IAAI,CAAC,eAAe,EACjC,SAAS,EAAE,IAAI,CAAC,aAAa,EAC7B,aAAa,EAAE,IAAI,CAAC,uBAAuB,GAC3C,CACH,CACa,CACjB,CACF,CAAC;QACJ,CAAC;QAED,oDAAyB,GAAzB;YACQ,IAAA,eAAmC,EAAjC,oBAAO,EAAE,wBAAwB,CAAC;YAC1C,OAAO,CACL;gBACE,8BAAC,4BAAkB,uBACb,8CAA0B,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,OAAO,SAAA,EAAE,SAAS,WAAA,EAAE,CAAC,EAC/F;gBACF,8BAAC,uBAAa,uBACR,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,IAAI,CAAC,IACjE,GAAG,EAAE,IAAI,CAAC,aAAa,IACvB,CACD,CACJ,CAAC;QACJ,CAAC;QAED,iCAAM,GAAN;YACQ,IAAA,eAA6E,EAA3E,wBAAS,EAAE,4BAAW,EAAE,gCAAa,EAAE,0BAAU,EAAE,wBAAwB,CAAC;YAC9E,IAAA,eAAwG,EAAtG,oCAAe,EAAE,4CAAmB,EAAE,sCAAgB,EAAE,oCAAe,EAAE,kCAA6B,CAAC;YAC/G,IAAM,OAAO,GAAG,kCAAc,CAAC,EAAE,gBAAgB,kBAAA,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;YAChE,IAAM,OAAO,GAAG,aAAa,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;YACvD,OAAO,CACL,uCACE,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,OAAO,EAAE,IAAI,CAAC,OAAO;gBAEpB,cAAc,IAAI,CACjB,8BAAC,kBAAQ,uBACH,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,IAC9C,GAAG,EAAE,IAAI,CAAC,QAAQ,IAClB,CACH;gBACA,eAAe,IAAI,CAClB,8BAAC,kBAAQ,IACP,eAAe,EAAE,eAAe,EAChC,qBAAqB,EAAE,IAAI,CAAC,qBAAqB,GACjD,CACH;gBACA,6CAAyB,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;oBAClD,CAAC,CAAC,IAAI,CAAC,0BAA0B,EAAE;oBACnC,CAAC,CAAC,IAAI,CAAC,yBAAyB,EAAE;gBAEnC,eAAe,IAAI,CAClB,8BAAC,sBAAY,IAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAkB;oBACjD,8BAAC,yBAAe,qBACd,mBAAmB,EAAE,mBAAmB,EACxC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,cAAc,EAAE,IAAI,CAAC,cAAc,EACnC,MAAM,EAAE,gBAAgB,CAAC,MAAM,EAC/B,KAAK,EAAE,wCAAoB,CAAC,EAAE,gBAAgB,kBAAA,EAAE,OAAO,SAAA,EAAE,SAAS,WAAA,EAAE,CAAC,EACrE,OAAO,EAAE,OAAO,EAChB,MAAM,EAAE,qCAAiB,CAAC,EAAE,gBAAgB,kBAAA,EAAE,OAAO,SAAA,EAAE,CAAC,EACxD,UAAU,EAAE,UAAU,EACtB,SAAS,EAAE,SAAS,IAChB,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,EAC5C,IAAI,CAAC,KAAK,CAAC,cAAc,EAC7B,CACW,CAChB;gBACA,oBAAS,CAAC,WAAW,CAAC,IAAI,oBAAY,CAAC,WAAW,uBAAO,gBAAgB,EAAG,CACzE,CACP,CAAC;QACJ,CAAC;QA/nBM,4BAAW,GAAG,kBAAkB,CAAC;QAgoB1C,uBAAC;KAAA,AAjoBD,CAA8C,eAAK,CAAC,SAAS,GAioB5D;sBAjoBoB,gBAAgB","sourcesContent":["import React, { cloneElement } from 'react';\nimport { isElement } from 'react-is';\n\n// Components\nimport SelectionMask from './SelectionMask';\nimport SelectionRangeMask from './SelectionRangeMask';\nimport CopyMask from './CopyMask';\nimport DragMask, { DraggedPosition } from './DragMask';\nimport DragHandle from './DragHandle';\nimport EditorContainer from '../common/editors/EditorContainer';\nimport EditorPortal from '../common/editors/EditorPortal';\n\n// Utils\nimport { isKeyPrintable, isCtrlKeyHeldDown } from '../common/utils/keyboardUtils';\nimport {\n  getSelectedDimensions,\n  getSelectedCellValue,\n  getSelectedRow,\n  getSelectedRangeDimensions,\n  getSelectedColumn,\n  getNextSelectedCellPosition,\n  canExitGrid,\n  isSelectedCellEditable,\n  selectedRangeIsSingleCell,\n  NextSelectedCellPosition\n} from '../utils/SelectedCellUtils';\nimport { isFrozen } from '../ColumnUtils';\nimport keyCodes from '../KeyCodes';\n\n// Types\nimport { UpdateActions, CellNavigationMode, EventTypes } from '../common/enums';\nimport { CalculatedColumn, Position, SelectedRange, RowGetter, Dimension, InteractionMasksMetaData, CommitEvent } from '../common/types';\nimport EventBus from './EventBus';\n\nconst SCROLL_CELL_BUFFER = 2;\n\ninterface NavAction {\n  getNext(current: Position): Position;\n  isCellAtBoundary(cell: Position): boolean;\n  onHitBoundary(next: Position): void;\n}\n\nexport interface Props extends InteractionMasksMetaData {\n  colVisibleStartIdx: number;\n  colVisibleEndIdx: number;\n  rowVisibleStartIdx: number;\n  rowVisibleEndIdx: number;\n  columns: CalculatedColumn[];\n  rowHeight: number;\n  rowGetter: RowGetter;\n  rowsCount: number;\n  enableCellSelect: boolean;\n  enableCellAutoFocus: boolean;\n  cellNavigationMode: CellNavigationMode;\n  eventBus: EventBus;\n  contextMenu?: React.ReactElement;\n  onHitBottomBoundary(position: Position): void;\n  onHitTopBoundary(position: Position): void;\n  onHitRightBoundary(position: Position): void;\n  onHitLeftBoundary(position: Position): void;\n  scrollLeft: number;\n  scrollTop: number;\n  getRowHeight(rowIdx: number): number;\n  getRowTop(rowIdx: number): number;\n  getRowColumns(rowIdx: number): CalculatedColumn[];\n  editorPortalTarget: Element;\n}\n\nexport interface State {\n  selectedPosition: Position;\n  selectedRange: SelectedRange;\n  copiedPosition: Position & { value: any } | null;\n  draggedPosition: DraggedPosition | null;\n  editorPosition: { top: number; left: number } | null;\n  isEditorEnabled: boolean;\n  firstEditorKeyPress: string | null;\n}\n\nexport default class InteractionMasks extends React.Component<Props, State> {\n  static displayName = 'InteractionMasks';\n\n  readonly state: Readonly<State> = {\n    selectedPosition: {\n      idx: -1,\n      rowIdx: -1\n    },\n    selectedRange: {\n      topLeft: {\n        idx: -1, rowIdx: -1\n      },\n      bottomRight: {\n        idx: -1, rowIdx: -1\n      },\n      startCell: null,\n      cursorCell: null,\n      isDragging: false\n    },\n    copiedPosition: null,\n    draggedPosition: null,\n    editorPosition: null,\n    isEditorEnabled: false,\n    firstEditorKeyPress: null\n  };\n\n  private readonly selectionMask = React.createRef<HTMLDivElement>();\n  private readonly copyMask = React.createRef<HTMLDivElement>();\n\n  private unsubscribeEventHandlers: Array<() => void> = [];\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { selectedPosition, isEditorEnabled } = this.state;\n    const { selectedPosition: prevSelectedPosition, isEditorEnabled: prevIsEditorEnabled } = prevState;\n    const isSelectedPositionChanged = selectedPosition !== prevSelectedPosition && (selectedPosition.rowIdx !== prevSelectedPosition.rowIdx || selectedPosition.idx !== prevSelectedPosition.idx);\n    const isEditorClosed = isEditorEnabled !== prevIsEditorEnabled && !isEditorEnabled;\n\n    if (isSelectedPositionChanged) {\n      // Call event handlers if selected cell has changed\n      const { onCellSelected, onCellDeSelected } = this.props;\n      if (onCellDeSelected && this.isCellWithinBounds(prevSelectedPosition)) {\n        onCellDeSelected({ ...prevSelectedPosition });\n      }\n\n      if (onCellSelected && this.isCellWithinBounds(selectedPosition)) {\n        onCellSelected({ ...selectedPosition });\n      }\n    }\n\n    if ((isSelectedPositionChanged && this.isCellWithinBounds(selectedPosition)) || isEditorClosed) {\n      this.focus();\n    }\n  }\n\n  componentDidMount() {\n    const { eventBus, enableCellAutoFocus } = this.props;\n\n    this.unsubscribeEventHandlers = [\n      eventBus.subscribe(EventTypes.SELECT_CELL, this.selectCell),\n      eventBus.subscribe(EventTypes.SELECT_START, this.onSelectCellRangeStarted),\n      eventBus.subscribe(EventTypes.SELECT_UPDATE, this.onSelectCellRangeUpdated),\n      eventBus.subscribe(EventTypes.SELECT_END, this.onSelectCellRangeEnded),\n      eventBus.subscribe(EventTypes.DRAG_ENTER, this.handleDragEnter)\n    ];\n\n    if (enableCellAutoFocus && this.isFocusedOnBody()) {\n      this.selectFirstCell();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeEventHandlers.forEach(h => h());\n  }\n\n  getEditorPosition() {\n    if (!this.selectionMask.current) return null;\n\n    const { editorPortalTarget } = this.props;\n    const { left: selectionMaskLeft, top: selectionMaskTop } = this.selectionMask.current.getBoundingClientRect();\n    if (editorPortalTarget === document.body) {\n      const { scrollLeft, scrollTop } = document.scrollingElement || document.documentElement;\n      return {\n        left: selectionMaskLeft + scrollLeft,\n        top: selectionMaskTop + scrollTop\n      };\n    }\n\n    const { left: portalTargetLeft, top: portalTargetTop } = editorPortalTarget.getBoundingClientRect();\n    const { scrollLeft, scrollTop } = editorPortalTarget;\n    return {\n      left: selectionMaskLeft - portalTargetLeft + scrollLeft,\n      top: selectionMaskTop - portalTargetTop + scrollTop\n    };\n  }\n\n  setMaskScollLeft(mask: HTMLDivElement | null, position: Position | null, scrollLeft: number): void {\n    if (!mask || !position) return;\n\n    const { idx, rowIdx } = position;\n    if (!(idx >= 0 && rowIdx >= 0)) return;\n\n    const column = this.props.columns[idx];\n    if (!isFrozen(column)) return;\n\n    const top = this.props.getRowTop(rowIdx);\n    const left = scrollLeft + column.left;\n    const transform = `translate(${left}px, ${top}px)`;\n    if (mask.style.transform !== transform) {\n      mask.style.transform = transform;\n    }\n  }\n\n  /**\n   * Sets the position of SelectionMask and CopyMask components when the canvas is scrolled\n   * This is only required on the frozen columns\n   */\n  setScrollLeft(scrollLeft: number): void {\n    this.setMaskScollLeft(this.selectionMask.current, this.state.selectedPosition, scrollLeft);\n    this.setMaskScollLeft(this.copyMask.current, this.state.copiedPosition, scrollLeft);\n  }\n\n  onKeyDown = (e: React.KeyboardEvent<HTMLDivElement>): void => {\n    if (isCtrlKeyHeldDown(e)) {\n      this.onPressKeyWithCtrl(e);\n    } else if (e.keyCode === keyCodes.Escape) {\n      this.onPressEscape();\n    } else if (e.keyCode === keyCodes.Tab) {\n      this.onPressTab(e);\n    } else if (this.isKeyboardNavigationEvent(e)) {\n      this.changeCellFromEvent(e);\n    } else if (isKeyPrintable(e.keyCode) || ([keyCodes.Backspace, keyCodes.Delete, keyCodes.Enter] as number[]).includes(e.keyCode)) {\n      this.openEditor(e);\n    }\n  };\n\n  isSelectedCellEditable(): boolean {\n    const { enableCellSelect, columns, rowGetter, onCheckCellIsEditable } = this.props;\n    const { selectedPosition } = this.state;\n    return isSelectedCellEditable({ enableCellSelect, columns, rowGetter, selectedPosition, onCheckCellIsEditable });\n  }\n\n  openEditor = (event?: React.KeyboardEvent<HTMLDivElement>): void => {\n    if (this.isSelectedCellEditable() && !this.state.isEditorEnabled) {\n      this.setState({\n        isEditorEnabled: true,\n        firstEditorKeyPress: event ? event.key : null,\n        editorPosition: this.getEditorPosition()\n      });\n    }\n  };\n\n  closeEditor(): void {\n    this.setState({\n      isEditorEnabled: false,\n      firstEditorKeyPress: null,\n      editorPosition: null\n    });\n  }\n\n  onPressKeyWithCtrl({ keyCode }: React.KeyboardEvent<HTMLDivElement>): void {\n    if (this.copyPasteEnabled()) {\n      if (keyCode === keyCodes.c) {\n        const { columns, rowGetter } = this.props;\n        const { selectedPosition } = this.state;\n        const value = getSelectedCellValue({ selectedPosition, columns, rowGetter });\n        this.handleCopy(value);\n      } else if (keyCode === keyCodes.v) {\n        this.handlePaste();\n      }\n    }\n  }\n\n  onFocus = (): void => {\n    const { idx, rowIdx } = this.state.selectedPosition;\n    if (idx === -1 && rowIdx === -1) {\n      this.selectFirstCell();\n    }\n  };\n\n  onPressTab(e: React.KeyboardEvent<HTMLDivElement>): void {\n    const { cellNavigationMode, columns, rowsCount } = this.props;\n    const { selectedPosition, isEditorEnabled } = this.state;\n    // When there are no rows in the grid, we need to allow the browser to handle tab presses\n    if (rowsCount === 0) {\n      return;\n    }\n\n    // If we are in a position to leave the grid, stop editing but stay in that cell\n    if (canExitGrid(e, { cellNavigationMode, columns, rowsCount, selectedPosition })) {\n      if (isEditorEnabled) {\n        this.closeEditor();\n        return;\n      }\n\n      // Reset the selected position before exiting\n      this.setState({ selectedPosition: { idx: -1, rowIdx: -1 } });\n      return;\n    }\n\n    this.changeCellFromEvent(e);\n  }\n\n  onPressEscape(): void {\n    if (this.copyPasteEnabled()) {\n      this.handleCancelCopy();\n      this.closeEditor();\n    }\n  }\n\n  copyPasteEnabled(): boolean {\n    return this.props.onCellCopyPaste !== null && this.isSelectedCellEditable();\n  }\n\n  handleCopy(value: any): void {\n    const { rowIdx, idx } = this.state.selectedPosition;\n    this.setState({\n      copiedPosition: { rowIdx, idx, value }\n    });\n  }\n\n  handleCancelCopy(): void {\n    this.setState({ copiedPosition: null });\n  }\n\n  handlePaste(): void {\n    const { columns, onCellCopyPaste, onGridRowsUpdated } = this.props;\n    const { selectedPosition, copiedPosition } = this.state;\n    const { rowIdx: toRow } = selectedPosition;\n\n    if (copiedPosition === null) {\n      return;\n    }\n\n    const cellKey = getSelectedColumn({ selectedPosition, columns }).key;\n    const { rowIdx: fromRow, value } = copiedPosition;\n\n    if (onCellCopyPaste) {\n      onCellCopyPaste({\n        cellKey,\n        rowIdx: toRow,\n        fromRow,\n        toRow,\n        value\n      });\n    }\n\n    onGridRowsUpdated(cellKey, toRow, toRow, { [cellKey]: value }, UpdateActions.COPY_PASTE, fromRow);\n  }\n\n  isKeyboardNavigationEvent(e: React.KeyboardEvent<HTMLDivElement>): boolean {\n    return this.getKeyNavActionFromEvent(e) !== null;\n  }\n\n  getKeyNavActionFromEvent(e: React.KeyboardEvent<HTMLDivElement>): NavAction | null {\n    const { rowVisibleEndIdx, rowVisibleStartIdx, colVisibleEndIdx, colVisibleStartIdx, onHitBottomBoundary, onHitRightBoundary, onHitLeftBoundary, onHitTopBoundary } = this.props;\n    const isCellAtBottomBoundary = (cell: Position): boolean => cell.rowIdx >= rowVisibleEndIdx - SCROLL_CELL_BUFFER;\n    const isCellAtTopBoundary = (cell: Position): boolean => cell.rowIdx !== 0 && cell.rowIdx <= rowVisibleStartIdx - 1;\n    const isCellAtRightBoundary = (cell: Position): boolean => cell.idx !== 0 && cell.idx >= colVisibleEndIdx - 1;\n    const isCellAtLeftBoundary = (cell: Position): boolean => cell.idx !== 0 && cell.idx <= colVisibleStartIdx + 1;\n\n    const ArrowDown: NavAction = {\n      getNext: (current) => ({ ...current, rowIdx: current.rowIdx + 1 }),\n      isCellAtBoundary: isCellAtBottomBoundary,\n      onHitBoundary: onHitBottomBoundary\n    };\n    const ArrowUp: NavAction = {\n      getNext: (current) => ({ ...current, rowIdx: current.rowIdx - 1 }),\n      isCellAtBoundary: isCellAtTopBoundary,\n      onHitBoundary: onHitTopBoundary\n    };\n    const ArrowRight: NavAction = {\n      getNext: (current) => ({ ...current, idx: current.idx + 1 }),\n      isCellAtBoundary: isCellAtRightBoundary,\n      onHitBoundary(next) {\n        onHitRightBoundary(next);\n        // Selected cell can hit the bottom boundary when the cellNavigationMode is 'changeRow'\n        if (isCellAtBottomBoundary(next)) {\n          onHitBottomBoundary(next);\n        }\n      }\n    };\n    const ArrowLeft: NavAction = {\n      getNext: (current) => ({ ...current, idx: current.idx - 1 }),\n      isCellAtBoundary: isCellAtLeftBoundary,\n      onHitBoundary(next) {\n        onHitLeftBoundary(next);\n        // Selected cell can hit the top boundary when the cellNavigationMode is 'changeRow'\n        if (isCellAtTopBoundary(next)) {\n          onHitTopBoundary(next);\n        }\n      }\n    };\n\n    if (e.keyCode === keyCodes.Tab) {\n      return e.shiftKey === true ? ArrowLeft : ArrowRight;\n    }\n\n    switch (e.key) {\n      case 'ArrowDown': return ArrowDown;\n      case 'ArrowUp': return ArrowUp;\n      case 'ArrowRight': return ArrowRight;\n      case 'ArrowLeft': return ArrowLeft;\n      default: return null;\n    }\n  }\n\n  changeCellFromEvent(e: React.KeyboardEvent<HTMLDivElement>): void {\n    e.preventDefault();\n    const isTab = e.keyCode === keyCodes.Tab;\n    const isShift = e.shiftKey;\n\n    if (isTab) {\n      const cellNavigationMode = this.props.cellNavigationMode === CellNavigationMode.NONE\n        ? CellNavigationMode.CHANGE_ROW\n        : this.props.cellNavigationMode;\n      this.changeCellFromKeyAction(e, cellNavigationMode);\n    } else if (isShift) {\n      this.changeSelectedRangeFromArrowKeyAction(e);\n    } else {\n      this.changeCellFromKeyAction(e, this.props.cellNavigationMode);\n    }\n  }\n\n  changeCellFromKeyAction(e: React.KeyboardEvent<HTMLDivElement>, cellNavigationMode: CellNavigationMode): void {\n    const keyNavAction = this.getKeyNavActionFromEvent(e);\n    if (keyNavAction) {\n      const currentPosition = this.state.selectedPosition;\n      const next = this.getNextSelectedCellPositionForKeyNavAction(keyNavAction, currentPosition, cellNavigationMode);\n      this.checkIsAtGridBoundary(keyNavAction, next);\n      this.selectCell(next);\n    }\n  }\n\n  changeSelectedRangeFromArrowKeyAction(e: React.KeyboardEvent<HTMLDivElement>): void {\n    const keyNavAction = this.getKeyNavActionFromEvent(e);\n    if (keyNavAction) {\n      const { cellNavigationMode } = this.props;\n      const currentPosition = this.state.selectedRange.cursorCell || this.state.selectedPosition;\n      const next = this.getNextSelectedCellPositionForKeyNavAction(keyNavAction, currentPosition, cellNavigationMode);\n      this.checkIsAtGridBoundary(keyNavAction, next);\n      this.onSelectCellRangeUpdated({ ...next }, true, () => { this.onSelectCellRangeEnded(); });\n    }\n  }\n\n  getNextSelectedCellPositionForKeyNavAction(keyNavAction: NavAction, currentPosition: Position, cellNavigationMode: CellNavigationMode): NextSelectedCellPosition {\n    const { getNext } = keyNavAction;\n    const nextPosition = getNext(currentPosition);\n    const { columns, rowsCount } = this.props;\n    return getNextSelectedCellPosition({\n      columns,\n      rowsCount,\n      cellNavigationMode,\n      nextPosition\n    });\n  }\n\n  checkIsAtGridBoundary(keyNavAction: NavAction, next: NextSelectedCellPosition): void {\n    const { isCellAtBoundary, onHitBoundary } = keyNavAction;\n    const { changeRowOrColumn, ...nextPos } = next;\n    if (isCellAtBoundary(nextPos) || changeRowOrColumn) {\n      onHitBoundary(nextPos);\n    }\n  }\n\n  isCellWithinBounds({ idx, rowIdx }: Position): boolean {\n    const { columns, rowsCount } = this.props;\n    return rowIdx >= 0 && rowIdx < rowsCount && idx >= 0 && idx < columns.length;\n  }\n\n  isGridSelected(): boolean {\n    return this.isCellWithinBounds(this.state.selectedPosition);\n  }\n\n  isFocused(): boolean {\n    return document.activeElement === this.selectionMask.current;\n  }\n\n  isFocusedOnBody(): boolean {\n    return document.activeElement === document.body;\n  }\n\n  focus(): void {\n    if (this.selectionMask.current && !this.isFocused()) {\n      this.selectionMask.current.focus();\n    }\n  }\n\n  selectFirstCell(): void {\n    this.selectCell({ rowIdx: 0, idx: 0 });\n  }\n\n  selectCell = (cell: Position, openEditor?: boolean): void => {\n    const callback = openEditor ? this.openEditor : undefined;\n    // Close the editor to commit any pending changes\n    if (this.state.isEditorEnabled) {\n      this.closeEditor();\n    }\n    this.setState(() => {\n      if (!this.isCellWithinBounds(cell)) return null;\n\n      return {\n        selectedPosition: cell,\n        selectedRange: {\n          topLeft: cell,\n          bottomRight: cell,\n          startCell: cell,\n          cursorCell: cell,\n          isDragging: false\n        }\n      };\n    }, callback);\n  };\n\n  createSingleCellSelectedRange(cellPosition: Position, isDragging: boolean): SelectedRange {\n    return {\n      topLeft: cellPosition,\n      bottomRight: cellPosition,\n      startCell: cellPosition,\n      cursorCell: cellPosition,\n      isDragging\n    };\n  }\n\n  onSelectCellRangeStarted = (selectedPosition: Position): void => {\n    this.setState({\n      selectedRange: this.createSingleCellSelectedRange(selectedPosition, true),\n      selectedPosition\n    }, () => {\n      if (this.props.onCellRangeSelectionStarted) {\n        this.props.onCellRangeSelectionStarted(this.state.selectedRange);\n      }\n    });\n  };\n\n  onSelectCellRangeUpdated = (cellPosition: Position, isFromKeyboard?: boolean, callback?: () => void): void => {\n    if (!this.state.selectedRange.isDragging && !isFromKeyboard || !this.isCellWithinBounds(cellPosition)) {\n      return;\n    }\n\n    const startCell = this.state.selectedRange.startCell || this.state.selectedPosition;\n    const colIdxs = [startCell.idx, cellPosition.idx].sort((a, b) => a - b);\n    const rowIdxs = [startCell.rowIdx, cellPosition.rowIdx].sort((a, b) => a - b);\n    const topLeft: Position = { idx: colIdxs[0], rowIdx: rowIdxs[0] };\n    const bottomRight: Position = { idx: colIdxs[1], rowIdx: rowIdxs[1] };\n\n    const selectedRange: SelectedRange = {\n      ...this.state.selectedRange,\n      // default the startCell to the selected cell, in case we've just started via keyboard\n      startCell: this.state.selectedRange.startCell || this.state.selectedPosition,\n      // assign the new state - the bounds of the range, and the new cursor cell\n      topLeft,\n      bottomRight,\n      cursorCell: cellPosition\n    };\n\n    this.setState({\n      selectedRange\n    }, () => {\n      if (this.props.onCellRangeSelectionUpdated) {\n        this.props.onCellRangeSelectionUpdated(this.state.selectedRange);\n      }\n      if (callback) {\n        callback();\n      }\n    });\n  };\n\n  onSelectCellRangeEnded = (): void => {\n    const selectedRange = { ...this.state.selectedRange, isDragging: false };\n    this.setState({ selectedRange }, () => {\n      if (this.props.onCellRangeSelectionCompleted) {\n        this.props.onCellRangeSelectionCompleted(this.state.selectedRange);\n      }\n\n      // Focus the InteractionMasks, so it can receive keyboard events\n      this.focus();\n    });\n  };\n\n  isDragEnabled(): boolean {\n    return this.isSelectedCellEditable();\n  }\n\n  handleDragStart = (e: React.DragEvent<HTMLDivElement>): void => {\n    const { selectedPosition } = this.state;\n    // To prevent dragging down/up when reordering rows. (TODO: is this required)\n    if (selectedPosition.idx > -1) {\n      e.dataTransfer.effectAllowed = 'copy';\n      // Setting data is required to make an element draggable in FF\n      const transferData = JSON.stringify(selectedPosition);\n      try {\n        e.dataTransfer.setData('text/plain', transferData);\n      } catch (ex) {\n        // IE only supports 'text' and 'URL' for the 'type' argument\n        e.dataTransfer.setData('text', transferData);\n      }\n      this.setState({\n        draggedPosition: {\n          ...selectedPosition,\n          overRowIdx: selectedPosition.rowIdx\n        }\n      });\n    }\n  };\n\n  handleDragEnter = (overRowIdx: number): void => {\n    this.setState(({ draggedPosition }) => {\n      if (draggedPosition) {\n        return { draggedPosition: { ...draggedPosition, overRowIdx } };\n      }\n      return null;\n    });\n  };\n\n  handleDragEnd = () => {\n    const { draggedPosition } = this.state;\n    if (draggedPosition === null) return;\n\n    const { rowIdx, overRowIdx } = draggedPosition;\n    const { columns, onGridRowsUpdated, rowGetter } = this.props;\n    const column = getSelectedColumn({ selectedPosition: draggedPosition, columns });\n    const value = getSelectedCellValue({ selectedPosition: draggedPosition, columns, rowGetter });\n    const cellKey = column.key;\n    const fromRow = rowIdx < overRowIdx ? rowIdx : overRowIdx;\n    const toRow = rowIdx > overRowIdx ? rowIdx : overRowIdx;\n\n    onGridRowsUpdated(cellKey, fromRow, toRow, { [cellKey]: value }, UpdateActions.CELL_DRAG);\n\n    this.setState({\n      draggedPosition: null\n    });\n  };\n\n  onDragHandleDoubleClick = (): void => {\n    const { onDragHandleDoubleClick, rowGetter } = this.props;\n    const { selectedPosition } = this.state;\n    const { idx, rowIdx } = selectedPosition;\n    const rowData = getSelectedRow({ selectedPosition, rowGetter });\n    onDragHandleDoubleClick({ idx, rowIdx, rowData });\n  };\n\n  onCommit = (args: CommitEvent): void => {\n    this.props.onCommit(args);\n    this.closeEditor();\n  };\n\n  onCommitCancel = (): void => {\n    this.closeEditor();\n  };\n\n  getSelectedDimensions = (selectedPosition: Position, useGridColumns?: boolean): Dimension => {\n    const { scrollLeft, getRowHeight, getRowTop, getRowColumns, columns: gridColumns } = this.props;\n    const columns = useGridColumns ? gridColumns : getRowColumns(selectedPosition.rowIdx);\n    const top = getRowTop(selectedPosition.rowIdx);\n    const rowHeight = getRowHeight(selectedPosition.rowIdx);\n    const dimension = getSelectedDimensions({ selectedPosition, columns, scrollLeft, rowHeight });\n    dimension.top = top;\n    return dimension;\n  };\n\n  renderSingleCellSelectView() {\n    return (\n      !this.state.isEditorEnabled && this.isGridSelected() && (\n        <SelectionMask\n          {...this.getSelectedDimensions(this.state.selectedPosition, true)}\n          ref={this.selectionMask}\n        >\n          {this.isDragEnabled() && (\n            <DragHandle\n              onDragStart={this.handleDragStart}\n              onDragEnd={this.handleDragEnd}\n              onDoubleClick={this.onDragHandleDoubleClick}\n            />\n          )}\n        </SelectionMask>\n      )\n    );\n  }\n\n  renderCellRangeSelectView() {\n    const { columns, rowHeight } = this.props;\n    return (\n      <>\n        <SelectionRangeMask\n          {...getSelectedRangeDimensions({ selectedRange: this.state.selectedRange, columns, rowHeight })}\n        />\n        <SelectionMask\n          {...this.getSelectedDimensions(this.state.selectedPosition, true)}\n          ref={this.selectionMask}\n        />\n      </>\n    );\n  }\n\n  render() {\n    const { rowGetter, contextMenu, getRowColumns, scrollLeft, scrollTop } = this.props;\n    const { isEditorEnabled, firstEditorKeyPress, selectedPosition, draggedPosition, copiedPosition } = this.state;\n    const rowData = getSelectedRow({ selectedPosition, rowGetter });\n    const columns = getRowColumns(selectedPosition.rowIdx);\n    return (\n      <div\n        onKeyDown={this.onKeyDown}\n        onFocus={this.onFocus}\n      >\n        {copiedPosition && (\n          <CopyMask\n            {...this.getSelectedDimensions(copiedPosition)}\n            ref={this.copyMask}\n          />\n        )}\n        {draggedPosition && (\n          <DragMask\n            draggedPosition={draggedPosition}\n            getSelectedDimensions={this.getSelectedDimensions}\n          />\n        )}\n        {selectedRangeIsSingleCell(this.state.selectedRange)\n          ? this.renderSingleCellSelectView()\n          : this.renderCellRangeSelectView()\n        }\n        {isEditorEnabled && (\n          <EditorPortal target={this.props.editorPortalTarget}>\n            <EditorContainer\n              firstEditorKeyPress={firstEditorKeyPress}\n              onCommit={this.onCommit}\n              onCommitCancel={this.onCommitCancel}\n              rowIdx={selectedPosition.rowIdx}\n              value={getSelectedCellValue({ selectedPosition, columns, rowGetter })}\n              rowData={rowData}\n              column={getSelectedColumn({ selectedPosition, columns })}\n              scrollLeft={scrollLeft}\n              scrollTop={scrollTop}\n              {...this.getSelectedDimensions(selectedPosition)}\n              {...this.state.editorPosition}\n            />\n          </EditorPortal>\n        )}\n        {isElement(contextMenu) && cloneElement(contextMenu, { ...selectedPosition })}\n      </div>\n    );\n  }\n}\n"]}