{"version":3,"file":"GridPropHelpers.js","sourceRoot":"","sources":["../../../src/helpers/test/GridPropHelpers.ts"],"names":[],"mappings":";;;;;;;;;;;IAEA,IAAM,OAAO,GAAuB,CAAC;YACnC,GAAG,EAAE,CAAC;YACN,GAAG,EAAE,IAAI;YACT,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,GAAG;YACV,IAAI,EAAE,CAAC;SACR,EAAE;YACD,GAAG,EAAE,CAAC;YACN,GAAG,EAAE,OAAO;YACZ,IAAI,EAAE,OAAO;YACb,KAAK,EAAE,GAAG;YACV,IAAI,EAAE,GAAG;SACV,EAAE;YACD,GAAG,EAAE,CAAC;YACN,GAAG,EAAE,OAAO;YACZ,IAAI,EAAE,OAAO;YACb,KAAK,EAAE,GAAG;YACV,IAAI,EAAE,GAAG;SACV,CAAC,CAAC;IAEH,IAAM,KAAK,GAAwD,EAAE,CAAC;IACtE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;QAC7B,KAAK,CAAC,IAAI,CAAC;YACT,EAAE,EAAE,CAAC;YACL,KAAK,EAAE,WAAS,CAAG;YACnB,KAAK,EAAE,CAAC,GAAG,IAAI;SAChB,CAAC,CAAC;KACJ;IAED,kBAAe;QACb,OAAO,SAAA;QACP,SAAS,EAAT,UAAU,CAAS;YACjB,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;QACD,SAAS;YACP,OAAO,KAAK,CAAC,MAAM,CAAC;QACtB,CAAC;QACD,YAAY,EAAE;YACZ,QAAQ,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE;YAC/B,OAAO,EAAE,IAAI;YACb,MAAM,EAAE,IAAI;SACb;KACF,CAAC;IAEW,QAAA,gBAAgB,GAAG;QAC9B,MAAM,EAAE,IAAI;QACZ,WAAW,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QACvB,eAAe,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QAC3B,YAAY,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QACxB,gBAAgB,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QAC5B,iBAAiB,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QAC7B,iBAAiB,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QAC7B,iBAAiB,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;QAC7B,WAAW,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;KACxB,CAAC","sourcesContent":["import { CalculatedColumn } from '../../common/types';\n\nconst columns: CalculatedColumn[] = [{\n  idx: 0,\n  key: 'id',\n  name: 'ID',\n  width: 100,\n  left: 0\n}, {\n  idx: 1,\n  key: 'title',\n  name: 'Title',\n  width: 100,\n  left: 100\n}, {\n  idx: 2,\n  key: 'count',\n  name: 'Count',\n  width: 100,\n  left: 200\n}];\n\nconst _rows: Array<{ id: number; title: string; count: number }> = [];\nfor (let i = 0; i < 1000; i++) {\n  _rows.push({\n    id: i,\n    title: `Title ${i}`,\n    count: i * 1000\n  });\n}\n\nexport default {\n  columns,\n  rowGetter(i: number) {\n    return _rows[i];\n  },\n  rowsCount() {\n    return _rows.length;\n  },\n  cellMetaData: {\n    selected: { idx: 2, rowIdx: 3 },\n    dragged: null,\n    copied: null\n  }\n};\n\nexport const fakeCellMetaData = {\n  rowKey: 'id',\n  onCellClick: () => null,\n  onCellMouseDown: () => null,\n  onCellExpand: () => null,\n  onCellMouseEnter: () => null,\n  onCellContextMenu: () => null,\n  onRowExpandToggle: () => null,\n  onCellDoubleClick: () => null,\n  onDragEnter: () => null\n};\n"]}