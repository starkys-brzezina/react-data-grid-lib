{"version":3,"file":"RowGroup.js","sourceRoot":"","sources":["../src/RowGroup.tsx"],"names":[],"mappings":";;;;;;;;;;;;IAAA,+BAA0C;IAC1C,wCAA4C;IA+B5C,IAAM,QAAQ,GAAG,kBAAU,CAAwB,SAAS,QAAQ,CAAC,KAAK,EAAE,GAAG;QAC7E,SAAS,iBAAiB,CAAC,MAAgB;YACjC,IAAA,wDAAiB,CAAwB;YACjD,IAAI,iBAAiB,EAAE;gBACrB,IAAM,YAAY,GAAG,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC;gBACjE,iBAAiB,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC,GAAG,EAAE,YAAY,cAAA,EAAE,eAAe,EAAE,KAAK,CAAC,eAAe,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;aAClH;QACH,CAAC;QAED,SAAS,gBAAgB;YACvB,iBAAiB,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACvC,CAAC;QAED,SAAS,OAAO;YACd,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,kBAAU,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;QACjF,CAAC;QAED,IAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC3D,IAAM,KAAK,GAAG,EAAE,KAAK,EAAE,UAAW,CAAC,IAAI,GAAG,UAAW,CAAC,KAAK,EAAE,CAAC;QAC9D,IAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,WAAW,CAAC;QAE/C,OAAO,CACL,uCAAK,SAAS,EAAC,sBAAsB,EAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO;YAClE,8BAAC,QAAQ,uBAAK,KAAK,IAAE,GAAG,EAAE,GAAG,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,iBAAiB,IAAI,CACvG,CACP,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,kBAAe,QAAQ,CAAC;IAOxB,IAAM,WAAW,GAAG,kBAAU,CAAmC,SAAS,WAAW,CAAC,KAAK,EAAE,GAAG;QAC9F,SAAS,SAAS,CAAC,EAA4B;gBAA1B,YAAG;YACd,IAAA,2CAAiB,CAAW;YACpC,IAAI,GAAG,KAAK,WAAW,EAAE;gBACvB,iBAAiB,CAAC,KAAK,CAAC,CAAC;aAC1B;YACD,IAAI,GAAG,KAAK,YAAY,EAAE;gBACxB,iBAAiB,CAAC,IAAI,CAAC,CAAC;aACzB;YACD,IAAI,GAAG,KAAK,OAAO,EAAE;gBACnB,iBAAiB,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;aACtC;QACH,CAAC;QAEO,IAAA,oBAAa,EAAb,kCAAa,EAAE,qBAAM,EAAE,yCAAgB,EAAE,6BAAU,EAAE,qDAAsB,EAAE,iBAAI,CAAW;QACpG,IAAM,UAAU,GAAG,SAAS,GAAG,EAAE,CAAC;QAElC,OAAO,CACL,uCACE,SAAS,EAAC,uBAAuB,EACjC,KAAK,EAAE,EAAE,MAAM,QAAA,EAAE,EACjB,SAAS,EAAE,SAAS,EACpB,QAAQ,EAAE,CAAC,EACX,GAAG,EAAE,GAAG;YAER,wCACE,SAAS,EAAC,iBAAiB,EAC3B,KAAK,EAAE,EAAE,UAAU,YAAA,EAAE,EACrB,OAAO,EAAE,gBAAgB,IAExB,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAC9D;YACP;gBAAS,sBAAsB;;gBAAI,IAAI,CAAU,CAC7C,CACP,CAAC;IACJ,CAAC,CAAC,CAAC","sourcesContent":["import React, { forwardRef } from 'react';\nimport { EventTypes } from './common/enums';\nimport { CellMetaData, RowRendererProps, CalculatedColumn } from './common/types';\nimport EventBus from './masks/EventBus';\n\ninterface Props {\n  height: number;\n  columns: CalculatedColumn[];\n  row: any;\n  cellRenderer?(): void;\n  cellMetaData: CellMetaData;\n  isSelected?: boolean;\n  idx: number;\n  extraClasses?: string;\n  forceUpdate?: boolean;\n  subRowDetails?: any;\n  isRowHovered?: boolean;\n  colVisibleStartIdx: number;\n  colVisibleEndIdx: number;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  isScrolling: boolean;\n  columnGroupDisplayName: string;\n  columnGroupName: string;\n  isExpanded: boolean;\n  treeDepth?: number;\n  name: string;\n  renderer?: React.ComponentType;\n  eventBus: EventBus;\n  renderBaseRow(p: RowRendererProps): React.ReactElement;\n}\n\nconst RowGroup = forwardRef<HTMLDivElement, Props>(function RowGroup(props, ref) {\n  function onRowExpandToggle(expand?: boolean) {\n    const { onRowExpandToggle } = props.cellMetaData;\n    if (onRowExpandToggle) {\n      const shouldExpand = expand == null ? !props.isExpanded : expand;\n      onRowExpandToggle({ rowIdx: props.idx, shouldExpand, columnGroupName: props.columnGroupName, name: props.name });\n    }\n  }\n\n  function onRowExpandClick() {\n    onRowExpandToggle(!props.isExpanded);\n  }\n\n  function onClick() {\n    props.eventBus.dispatch(EventTypes.SELECT_CELL, { rowIdx: props.idx, idx: 0 });\n  }\n\n  const lastColumn = props.columns[props.columns.length - 1];\n  const style = { width: lastColumn!.left + lastColumn!.width };\n  const Renderer = props.renderer || DefaultBase;\n\n  return (\n    <div className=\"react-grid-row-group\" style={style} onClick={onClick}>\n      <Renderer {...props} ref={ref} onRowExpandClick={onRowExpandClick} onRowExpandToggle={onRowExpandToggle} />\n    </div>\n  );\n});\n\nexport default RowGroup;\n\ninterface DefaultBaseProps extends Props {\n  onRowExpandClick(): void;\n  onRowExpandToggle(expand?: boolean): void;\n}\n\nconst DefaultBase = forwardRef<HTMLDivElement, DefaultBaseProps>(function DefaultBase(props, ref) {\n  function onKeyDown({ key }: React.KeyboardEvent) {\n    const { onRowExpandToggle } = props;\n    if (key === 'ArrowLeft') {\n      onRowExpandToggle(false);\n    }\n    if (key === 'ArrowRight') {\n      onRowExpandToggle(true);\n    }\n    if (key === 'Enter') {\n      onRowExpandToggle(!props.isExpanded);\n    }\n  }\n\n  const { treeDepth = 0, height, onRowExpandClick, isExpanded, columnGroupDisplayName, name } = props;\n  const marginLeft = treeDepth * 20;\n\n  return (\n    <div\n      className=\"rdg-row-group-default\"\n      style={{ height }}\n      onKeyDown={onKeyDown}\n      tabIndex={0}\n      ref={ref}\n    >\n      <span\n        className=\"row-expand-icon\"\n        style={{ marginLeft }}\n        onClick={onRowExpandClick}\n      >\n        {isExpanded ? String.fromCharCode(9660) : String.fromCharCode(9658)}\n      </span>\n      <strong>{columnGroupDisplayName}: {name}</strong>\n    </div>\n  );\n});\n"]}