{"version":3,"file":"CellAction.js","sourceRoot":"","sources":["../src/CellAction.tsx"],"names":[],"mappings":";;;;;;;;;;;;IAAA,yCAAoC;IACpC,+BAAwC;IAQxC,SAAwB,UAAU,CAAC,EAAqD;YAAnD,cAAI,EAAE,oBAAO,EAAE,sBAAQ,EAAE,oBAAO;QAC7D,IAAA,+CAAqC,EAApC,cAAM,EAAE,iBAA4B,CAAC;QAE5C,IAAM,iBAAiB,GAAG,oBAAU,CAAC,iBAAiB,EAAE;YACtD,sBAAsB,EAAE,OAAO;SAChC,CAAC,CAAC;QACH,IAAM,mBAAmB,GAAG,oBAAU,CAAC,wBAAwB,EAAE;YAC/D,gCAAgC,EAAE,MAAM;SACzC,CAAC,CAAC;QAEH,SAAS,iBAAiB;YACxB,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;gBAClC,QAAQ,EAAE,CAAC;aACZ;YAED,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC;aACpB;QACH,CAAC;QAED,OAAO,CACL,uCAAK,SAAS,EAAE,iBAAiB,EAAE,YAAY,EAAE,cAAM,OAAA,SAAS,CAAC,KAAK,CAAC,EAAhB,CAAgB;YACrE,uCAAK,SAAS,EAAE,mBAAmB,EAAE,OAAO,EAAE,iBAAiB,IAC5D,IAAI,CACD;YAEJ,MAAM,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,IAAI,CACrC,uCAAK,SAAS,EAAC,sBAAsB,IAClC,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,KAAK,IAAK,OAAA,wCAAM,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,QAAQ,IAAG,MAAM,CAAC,IAAI,CAAQ,EAAhE,CAAgE,CAAC,CAC7F,CACP,CACC,CACP,CAAC;IACJ,CAAC;IAjCD,6BAiCC","sourcesContent":["import classNames from 'classnames';\nimport React, { useState } from 'react';\n\nimport { CellActionButton } from './common/types';\n\nexport interface CellActionProps extends CellActionButton {\n  isFirst: boolean;\n}\n\nexport default function CellAction({ icon, actions, callback, isFirst }: CellActionProps) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const cellActionClasses = classNames('rdg-cell-action', {\n    'rdg-cell-action-last': isFirst\n  });\n  const actionButtonClasses = classNames('rdg-cell-action-button', {\n    'rdg-cell-action-button-toggled': isOpen\n  });\n\n  function onActionIconClick() {\n    if (typeof callback === 'function') {\n      callback();\n    }\n\n    if (actions && actions.length > 0) {\n      setIsOpen(!isOpen);\n    }\n  }\n\n  return (\n    <div className={cellActionClasses} onMouseLeave={() => setIsOpen(false)}>\n      <div className={actionButtonClasses} onClick={onActionIconClick}>\n        {icon}\n      </div>\n      {\n        isOpen && actions && actions.length && (\n          <div className=\"rdg-cell-action-menu\">\n            {actions.map((action, index) => <span key={index} onClick={action.callback}>{action.text}</span>)}\n          </div>\n        )}\n    </div>\n  );\n}\n"]}