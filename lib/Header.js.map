{"version":3,"file":"Header.js","sourceRoot":"","sources":["../src/Header.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\n\nimport HeaderRow, { HeaderRowProps } from './HeaderRow';\nimport { resizeColumn } from './ColumnMetrics';\nimport getScrollbarSize from './getScrollbarSize';\nimport { HeaderRowType } from './common/enums';\nimport { CalculatedColumn, ColumnMetrics, CellMetaData, HeaderRowData } from './common/types';\n\ntype SharedHeaderRowProps = Pick<HeaderRowProps,\n'draggableHeaderCell'\n| 'getValidFilterValues'\n| 'sortDirection'\n| 'sortColumn'\n| 'onHeaderDrop'\n| 'onSort'\n>;\n\nexport interface HeaderProps extends SharedHeaderRowProps {\n  columnMetrics: ColumnMetrics;\n  totalWidth: number | string;\n  height: number;\n  headerRows: HeaderRowData[];\n  onColumnResize(idx: number, width: number): void;\n  cellMetaData: CellMetaData;\n}\n\ninterface State {\n  resizing: { column: CalculatedColumn; columnMetrics: ColumnMetrics } | null;\n}\n\nexport default class Header extends React.Component<HeaderProps, State> {\n  readonly state: Readonly<State> = { resizing: null };\n\n  private readonly row = React.createRef<HeaderRow>();\n  private readonly filterRow = React.createRef<HeaderRow>();\n\n  componentWillReceiveProps(): void {\n    this.setState({ resizing: null });\n  }\n\n  onColumnResize = (column: CalculatedColumn, width: number): void => {\n    const pos = this.getColumnPosition(column);\n\n    if (pos === null) return;\n\n    const prevColumnMetrics = this.state.resizing ? this.state.resizing.columnMetrics : this.props.columnMetrics;\n    const columnMetrics = resizeColumn({ ...prevColumnMetrics }, pos, width);\n\n    // we don't want to influence scrollLeft while resizing\n    if (columnMetrics.totalWidth < prevColumnMetrics.totalWidth) {\n      columnMetrics.totalWidth = prevColumnMetrics.totalWidth;\n    }\n\n    this.setState({\n      resizing: {\n        column: columnMetrics.columns[pos],\n        columnMetrics\n      }\n    });\n  };\n\n  onColumnResizeEnd = (column: CalculatedColumn, width: number): void => {\n    const pos = this.getColumnPosition(column);\n    if (pos === null) return;\n    this.props.onColumnResize(pos, width || column.width);\n  };\n\n  getHeaderRows() {\n    const columnMetrics = this.getColumnMetrics();\n\n    return this.props.headerRows.map((row, index) => {\n      // To allow header filters to be visible\n      const isFilterRow = row.rowType === HeaderRowType.FILTER;\n      const rowHeight = isFilterRow ? '500px' : 'auto';\n      const scrollbarSize = getScrollbarSize() > 0 ? getScrollbarSize() : 0;\n      const updatedWidth = typeof this.props.totalWidth === 'number'\n        ? this.props.totalWidth - scrollbarSize\n        : this.props.totalWidth;\n      const headerRowStyle: React.CSSProperties = {\n        top: this.getCombinedHeaderHeights(index),\n        width: updatedWidth,\n        minHeight: rowHeight\n      };\n\n      return (\n        <HeaderRow\n          key={row.rowType}\n          ref={isFilterRow ? this.filterRow : this.row}\n          rowType={row.rowType}\n          style={headerRowStyle}\n          onColumnResize={this.onColumnResize}\n          onColumnResizeEnd={this.onColumnResizeEnd}\n          width={columnMetrics.width}\n          height={row.height || this.props.height}\n          columns={columnMetrics.columns}\n          draggableHeaderCell={this.props.draggableHeaderCell}\n          filterable={row.filterable}\n          onFilterChange={row.onFilterChange}\n          onHeaderDrop={this.props.onHeaderDrop}\n          sortColumn={this.props.sortColumn}\n          sortDirection={this.props.sortDirection}\n          onSort={this.props.onSort}\n          getValidFilterValues={this.props.getValidFilterValues}\n        />\n      );\n    });\n  }\n\n  getColumnMetrics(): ColumnMetrics {\n    if (this.state.resizing) {\n      return this.state.resizing.columnMetrics;\n    }\n    return this.props.columnMetrics;\n  }\n\n  getColumnPosition(column: CalculatedColumn): number | null {\n    const { columns } = this.getColumnMetrics();\n    const idx = columns.findIndex(c => c.key === column.key);\n    return idx === -1 ? null : idx;\n  }\n\n  getCombinedHeaderHeights(until?: number): number {\n    const stopAt = typeof until === 'number'\n      ? until\n      : this.props.headerRows.length;\n\n    let height = 0;\n    for (let index = 0; index < stopAt; index++) {\n      height += this.props.headerRows[index].height || this.props.height;\n    }\n    return height;\n  }\n\n  setScrollLeft(scrollLeft: number): void {\n    const node = ReactDOM.findDOMNode(this.row.current) as Element;\n    node.scrollLeft = scrollLeft;\n    this.row.current!.setScrollLeft(scrollLeft);\n    if (this.filterRow.current) {\n      const nodeFilters = ReactDOM.findDOMNode(this.filterRow.current) as Element;\n      nodeFilters.scrollLeft = scrollLeft;\n      this.filterRow.current.setScrollLeft(scrollLeft);\n    }\n  }\n\n  // Set the cell selection to -1 x -1 when clicking on the header\n  onHeaderClick = (): void => {\n    this.props.cellMetaData.onCellClick({ rowIdx: -1, idx: -1 });\n  };\n\n  render() {\n    const className = classNames('react-grid-Header', {\n      'react-grid-Header--resizing': !!this.state.resizing\n    });\n\n    return (\n      <div\n        style={{ height: this.getCombinedHeaderHeights() }}\n        className={className}\n        onClick={this.onHeaderClick}\n      >\n        {this.getHeaderRows()}\n      </div>\n    );\n  }\n}\n"]}