{"version":3,"file":"Cell.js","sourceRoot":"","sources":["../src/Cell.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport { isElement, isValidElementType } from 'react-is';\n\nimport { SubRowOptions, FormatterProps, ColumnEventInfo, CellRenderer, CellRendererProps } from './common/types';\nimport { SimpleCellFormatter } from './formatters';\nimport CellAction from './CellAction';\nimport CellExpand from './CellExpander';\nimport ChildRowDeleteButton from './ChildRowDeleteButton';\nimport { isFrozen } from './ColumnUtils';\n\nconst getSubRowOptions = ({ rowIdx, idx, rowData, expandableOptions: expandArgs }: Props): SubRowOptions => ({ rowIdx, idx, rowData, expandArgs });\n\nexport interface Props extends CellRendererProps {\n  // TODO: Check if these props are required or not. These are most likely set by custom cell renderer\n  className?: string;\n  tooltip?: string;\n  cellControls?: any;\n}\n\nexport default class Cell extends React.PureComponent<Props> implements CellRenderer {\n  static defaultProps = {\n    value: ''\n  };\n\n  private readonly cell = React.createRef<HTMLDivElement>();\n\n  componentDidMount() {\n    this.checkScroll();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (isFrozen(prevProps.column) && !isFrozen(this.props.column)) {\n      this.removeScroll();\n    }\n  }\n\n  handleCellClick = () => {\n    const { idx, rowIdx, cellMetaData } = this.props;\n    cellMetaData.onCellClick({ idx, rowIdx });\n  };\n\n  handleCellMouseDown = () => {\n    const { idx, rowIdx, cellMetaData } = this.props;\n    if (cellMetaData.onCellMouseDown) {\n      cellMetaData.onCellMouseDown({ idx, rowIdx });\n    }\n  };\n\n  handleCellMouseEnter = () => {\n    const { idx, rowIdx, cellMetaData } = this.props;\n    if (cellMetaData.onCellMouseEnter) {\n      cellMetaData.onCellMouseEnter({ idx, rowIdx });\n    }\n  };\n\n  handleCellContextMenu = () => {\n    const { idx, rowIdx, cellMetaData } = this.props;\n    cellMetaData.onCellContextMenu({ idx, rowIdx });\n  };\n\n  handleCellDoubleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    const { idx, rowIdx, cellMetaData } = this.props;\n    cellMetaData.onCellDoubleClick({ idx, rowIdx });\n  };\n\n  handleCellExpand = () => {\n    const { onCellExpand } = this.props.cellMetaData;\n    if (onCellExpand) {\n      onCellExpand(getSubRowOptions(this.props));\n    }\n  };\n\n  handleDeleteSubRow = () => {\n    const meta = this.props.cellMetaData;\n    if (meta.onDeleteSubRow) {\n      meta.onDeleteSubRow(getSubRowOptions(this.props));\n    }\n  };\n\n  handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n  };\n\n  getStyle(): React.CSSProperties {\n    return {\n      width: this.props.column.width,\n      height: this.props.height,\n      left: this.props.column.left\n    };\n  }\n\n  getRowData() {\n    const { rowData } = this.props;\n    return typeof rowData.toJSON === 'function' ? rowData.toJSON() : rowData;\n  }\n\n  getFormatterDependencies() {\n    // convention based method to get corresponding Id or Name of any Name or Id property\n    const { getRowMetaData } = this.props.column;\n    if (getRowMetaData) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn('getRowMetaData for formatters is deprecated and will be removed in a future version of ReactDataGrid. Instead access row prop of formatter');\n      }\n      return getRowMetaData(this.getRowData(), this.props.column);\n    }\n  }\n\n  getCellClass() {\n    const { idx, column, lastFrozenColumnIndex, isRowSelected, tooltip, expandableOptions } = this.props;\n    return classNames(\n      column.cellClass,\n      'react-grid-Cell',\n      this.props.className, {\n        'react-grid-Cell--frozen': isFrozen(column),\n        'rdg-last--frozen': lastFrozenColumnIndex === idx,\n        'row-selected': isRowSelected,\n        'has-tooltip': !!tooltip,\n        'rdg-child-cell': expandableOptions && expandableOptions.subRowDetails && expandableOptions.treeDepth > 0\n      }\n    );\n  }\n\n  checkScroll() {\n    const { scrollLeft, column } = this.props;\n    const node = this.cell.current;\n    if (isFrozen(column) && node && node.style.transform != null) {\n      this.setScrollLeft(scrollLeft);\n    }\n  }\n\n  setScrollLeft(scrollLeft: number) {\n    const node = this.cell.current;\n    if (node) {\n      node.style.transform = `translateX(${scrollLeft}px)`;\n    }\n  }\n\n  removeScroll() {\n    const node = this.cell.current;\n    if (node) {\n      node.style.transform = null;\n    }\n  }\n\n  getEvents() {\n    const { column, cellMetaData, idx, rowIdx, rowData } = this.props;\n    const columnEvents = column.events;\n    const allEvents: { [key: string]: Function } = {\n      onClick: this.handleCellClick,\n      onMouseDown: this.handleCellMouseDown,\n      onMouseEnter: this.handleCellMouseEnter,\n      onDoubleClick: this.handleCellDoubleClick,\n      onContextMenu: this.handleCellContextMenu,\n      onDragOver: this.handleDragOver\n    };\n\n    if (!columnEvents) {\n      return allEvents;\n    }\n\n    for (const event in columnEvents) {\n      const columnEventHandler = columnEvents[event];\n      if (columnEventHandler) {\n        const eventInfo: ColumnEventInfo = {\n          idx,\n          rowIdx,\n          column,\n          rowId: rowData[cellMetaData.rowKey]\n        };\n        if (allEvents.hasOwnProperty(event)) {\n          const existingEvent = allEvents[event];\n          allEvents[event] = (e: Event) => {\n            existingEvent(e);\n            columnEventHandler(e, eventInfo);\n          };\n        } else {\n          allEvents[event] = (e: Event) => {\n            columnEventHandler(e, eventInfo);\n          };\n        }\n      }\n    }\n\n    return allEvents;\n  }\n\n  getCellActions() {\n    const { cellMetaData, column, rowData } = this.props;\n    if (cellMetaData.getCellActions) {\n      const cellActionButtons = cellMetaData.getCellActions(column, rowData);\n      if (cellActionButtons && cellActionButtons.length > 0) {\n        return cellActionButtons.map((action, index) => {\n          return <CellAction key={index} isFirst={index === 0} {...action} />;\n        });\n      }\n    }\n    return null;\n  }\n\n  renderCellContent() {\n    let cellContent;\n    const { value, column, height, tooltip, isScrolling, expandableOptions, cellMetaData, rowIdx } = this.props;\n    const Formatter = column.formatter;\n    const cellProps: FormatterProps<any> = {\n      rowIdx,\n      value,\n      isScrolling,\n      column,\n      row: this.getRowData(),\n      dependentValues: this.getFormatterDependencies()\n    };\n\n    if (isElement(Formatter)) {\n      cellContent = React.cloneElement(Formatter, cellProps);\n    } else if (isValidElementType(Formatter)) {\n      cellContent = <Formatter {...cellProps} />;\n    } else {\n      cellContent = <SimpleCellFormatter value={value as string} />;\n    }\n    const isExpandCell = expandableOptions ? expandableOptions.field === column.key : false;\n    const treeDepth = expandableOptions ? expandableOptions.treeDepth : 0;\n    const marginLeft = expandableOptions && isExpandCell ? expandableOptions.treeDepth * 30 : 0;\n\n    const isDeleteSubRowEnabled = !!cellMetaData.onDeleteSubRow;\n    const cellDeleter = expandableOptions && treeDepth > 0 && isExpandCell && (\n      <ChildRowDeleteButton\n        treeDepth={treeDepth}\n        cellHeight={height}\n        siblingIndex={expandableOptions.subRowDetails.siblingIndex}\n        numberSiblings={expandableOptions.subRowDetails.numberSiblings}\n        onDeleteSubRow={this.handleDeleteSubRow}\n        isDeleteSubRowEnabled={isDeleteSubRowEnabled}\n      />\n    );\n\n    const cellTooltip = tooltip && <span className=\"cell-tooltip-text\">{tooltip}</span>;\n    const classes = classNames('react-grid-Cell__value',\n      { 'cell-tooltip': !!tooltip }\n    );\n\n    return (\n      <div className={classes}>\n        {cellDeleter}\n        <div className=\"react-grid-Cell__container\" style={{ marginLeft }}>\n          <span>{cellContent}</span>\n          {this.props.cellControls}\n        </div>\n        {cellTooltip}\n      </div>\n    );\n  }\n\n  render() {\n    const { column, children, expandableOptions } = this.props;\n    if (column.hidden) {\n      return null;\n    }\n\n    const style = this.getStyle();\n    const className = this.getCellClass();\n    const cellActionButtons = this.getCellActions();\n    const cellContent = children || this.renderCellContent();\n    const events = this.getEvents();\n    const cellExpander = expandableOptions && expandableOptions.canExpand && (\n      <CellExpand\n        expanded={expandableOptions.expanded}\n        onCellExpand={this.handleCellExpand}\n      />\n    );\n\n    return (\n      <div\n        ref={this.cell}\n        className={className}\n        style={style}\n        {...events}\n      >\n        {cellActionButtons}\n        {cellExpander}\n        {cellContent}\n      </div>\n    );\n  }\n}\n"]}